/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
var x3: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.CartesianComplex] = manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
var x4: Double = 0.0
val x1 = x0
var x5: Double = x1
var x8: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.PolarComplex] = manifest[scala.virtualization.lms.epfl.test9.PolarComplex]
var x9: Double = x1
var x10: Double = 0.0
val x12 = x0 > 0
val x26 = if (x12) {
val x14 = x4
x14
} else {
val x25 = 0
x25
}
var x33: Double = x26
val x27 = if (x12) {
val x15 = x5
x15
} else {
val x25 = 0
x25
}
var x34: Double = x27
val x28 = if (x12) {
val x13 = x3
x13
} else {
val x18 = x8
x18
}
val x31 = x28.asInstanceOf[scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.Complex]]
var x35: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.Complex] = x31
val x29 = if (x12) {
val x25 = 0
x25
} else {
val x20 = x10
x20
}
var x36: Double = x29
val x30 = if (x12) {
val x25 = 0
x25
} else {
val x19 = x9
x19
}
var x37: Double = x30
val x39 = x33
val x40 = x34
val x41 = x35
val x42 = x36
val x43 = x37
val x45 = x41 <:< manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
val x53 = if (x45) {
x39
} else {
val x48 = java.lang.Math.cos(x42)
val x49 = x43*x48
x49
}
var x61: Double = x53
val x54 = if (x45) {
x40
} else {
val x50 = java.lang.Math.sin(x42)
val x51 = x43*x50
x51
}
var x62: Double = x54
val x55 = if (x45) {
manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
} else {
manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
}
val x59 = x55.asInstanceOf[scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]]
var x63: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.CartesianComplex] = x59
val x57 = if (x45) {
x42
} else {
val x56 = 0
x56
}
var x64: Double = x57
val x58 = if (x45) {
x43
} else {
val x56 = 0
x56
}
var x65: Double = x58
val x67 = x61
val x68 = x62
val x69 = x63
val x70 = x64
val x71 = x65
val x72 = Map("re"->x67,"im"->x68,"clzz"->x69,"phi"->x70,"r"->x71) //MyClassTag(scala.virtualization.lms.epfl.test9.CartesianComplex)
val x73 = println(x72)
x73
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
Map(re -> 0.0, im -> 3.0, clzz -> scala.virtualization.lms.epfl.test9.CartesianComplex, phi -> 0.0, r -> 0.0)
