-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),Singleton(Block(Sym(2))))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayLength(Sym(4)))
TP(Sym(7),ArrayIndex(Sym(4),Sym(6)))
TP(Sym(8),IntTimes(Sym(7),Const(4)))
TP(Sym(9),IntTimes(Sym(8),Const(2)))
TP(Sym(10),Singleton(Block(Sym(9))))
TP(Sym(11),SimpleLoop(Sym(5),Sym(6),MultiArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayLength(Sym(11)))
TP(Sym(14),ArrayIndex(Sym(11),Sym(13)))
TP(Sym(15),OrderingGT(Sym(14),Const(20)))
TP(Sym(16),IntTimes(Sym(14),Const(3)))
TP(Sym(17),Singleton(Block(Sym(16))))
TP(Sym(18),EmptyArrayInLoop(Sym(13)))
TP(Sym(19),IfThenElse(Sym(15),Block(Sym(17)),Block(Sym(18))))
TP(Sym(20),SimpleLoop(Sym(12),Sym(13),MultiArrayElem(Block(Sym(19)))))
TP(Sym(21),ArrayLength(Sym(20)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(23),Reify(Sym(22),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.length
val x11 = new Array[Int](x5)
for (x6 <- 0 until x5) {
val x7 = x4.apply(x6)
val x8 = x7 * 4
val x9 = x8 * 2
x11(x6) = x9
}
val x12 = x11.length
var x20 = new ArrayBuilder[Int]
for (x13 <- 0 until x12) {
val x14 = x11.apply(x13)
val x15 = x14 > 20
if (x15) {
val x16 = x14 * 3
x20 += x16
}
}
val x21 = x20.length
val x22 = println(x21)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(5),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Fusing prod Sym(4) with cons Sym(11). Type: Mcsingle_Multi(Sym(2),Sym(1),Sym(6),Sym(4),Sym(4),Sym(11))
(VFT) Fused prod Sym(4) with cons Sym(11), fused sym: Sym(27)
(VFT) Replaced TP(Sym(12),ArrayLength(Sym(11))) with fixed length: Const(100)

(VFT) Fusing prod Sym(27) with cons Sym(20). Type: Mcsingle_Multi(Sym(25),Sym(1),Sym(13),Sym(27),Sym(11),Sym(20))
(VFT) Fused prod Sym(27) with cons Sym(20), fused sym: Sym(33)

(VFT) all vertically fused: List(Sym(4), Sym(33), Sym(27))

-- after vertical transformation
var x33 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x24 = x2 * 4
val x25 = x24 * 2
val x28 = x25 > 20
if (x28) {
val x29 = x25 * 3
x33 += x29
}
}
val x34 = x33.length
val x35 = println(x34)

-- horizontal transformation
(HFT) Recording Sym(33), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
var x33 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x24 = x2 * 4
val x25 = x24 * 2
val x28 = x25 > 20
if (x28) {
val x29 = x25 * 3
x33 += x29
}
}
val x34 = x33.length
val x37 = println(x34)

-- fusion
var x33 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x24 = x2 * 4
val x25 = x24 * 2
val x28 = x25 > 20
if (x28) {
val x29 = x25 * 3
x33 += x29
}
}
val x34 = x33.length
val x37 = println(x34)
-- done
