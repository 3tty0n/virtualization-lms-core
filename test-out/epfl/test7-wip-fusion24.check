-- full graph
TP(Sym(2),OrderingGT(Sym(1),Const(10)))
TP(Sym(3),IntPlus(Sym(1),Const(1)))
TP(Sym(4),SingletonInLoop(Block(Sym(3)),Sym(1)))
TP(Sym(6),EmptyArrayInLoop(Sym(1),Sym(5)))
TP(Sym(7),IfThenElse(Sym(2),Block(Sym(4)),Block(Sym(6))))
TP(Sym(8),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(7)))))
TP(Sym(9),ArrayLength(Sym(8)))
TP(Sym(11),ArrayIndex(Sym(8),Sym(10)))
TP(Sym(12),IntPlus(Sym(11),Const(2)))
TP(Sym(13),SingletonInLoop(Block(Sym(12)),Sym(10)))
TP(Sym(14),SimpleLoop(Sym(9),Sym(10),MultiArrayElem(Block(Sym(13)))))
TP(Sym(16),ArrayIndex(Sym(8),Sym(15)))
TP(Sym(17),OrderingGT(Sym(16),Const(20)))
TP(Sym(18),IntPlus(Sym(16),Const(3)))
TP(Sym(19),SingletonInLoop(Block(Sym(18)),Sym(15)))
TP(Sym(21),EmptyArrayInLoop(Sym(15),Sym(20)))
TP(Sym(22),IfThenElse(Sym(17),Block(Sym(19)),Block(Sym(21))))
TP(Sym(23),SimpleLoop(Sym(9),Sym(15),MultiArrayElem(Block(Sym(22)))))
TP(Sym(25),ArrayIndex(Sym(8),Sym(24)))
TP(Sym(27),IntPlus(Sym(26),Sym(25)))
TP(Sym(28),SingletonInLoop(Block(Sym(27)),Sym(26)))
TP(Sym(29),SimpleLoop(Sym(25),Sym(26),MultiArrayElem(Block(Sym(28)))))
TP(Sym(30),SimpleLoop(Sym(9),Sym(24),MultiArrayElem(Block(Sym(29)))))
TP(Sym(32),ArrayIndex(Sym(8),Sym(31)))
TP(Sym(33),IntPlus(Const(2),Sym(32)))
TP(Sym(34),SingletonInLoop(Block(Sym(33)),Sym(31)))
TP(Sym(37),NumericPlus(Sym(36),Sym(35)))
TP(Sym(38),SimpleLoop(Sym(9),Sym(31),MultiReduceElem(Block(Sym(34)),Block(Sym(37)),Const(0),Sym(35),Sym(36))))
TP(Sym(41),ArrayIndex(Sym(8),Sym(39)))
TP(Sym(42),IntPlus(Sym(41),Sym(40)))
TP(Sym(43),SingletonInLoop(Block(Sym(42)),Sym(40)))
TP(Sym(44),SimpleLoop(Const(2),Sym(40),MultiArrayElem(Block(Sym(43)))))
TP(Sym(47),IntPlus(Sym(46),Sym(45)))
TP(Sym(48),SimpleLoop(Sym(9),Sym(39),MultiReduceElem(Block(Sym(44)),Block(Sym(47)),Const(0),Sym(45),Sym(46))))
TP(Sym(49),ArrayIndex(Sym(14),Const(0)))
TP(Sym(50),Reflect(Print(Sym(49)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(51),ArrayIndex(Sym(23),Const(0)))
TP(Sym(52),Reflect(Print(Sym(51)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(50))))
TP(Sym(53),ArrayIndex(Sym(30),Const(0)))
TP(Sym(54),Reflect(Print(Sym(53)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(52))))
TP(Sym(55),Reflect(Print(Sym(38)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(54))))
TP(Sym(56),Reflect(Print(Sym(48)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(55))))
TP(Sym(57),Reify(Sym(56),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(50), Sym(52), Sym(54), Sym(55), Sym(56))))

-- before transformation
val x8_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
if (x2) {
val x3 = x1 + 1
x8_builder += x3
}
}
val x8 = x8_builder.result()
val x9 = x8.length
val x14 = new Array[Int](x9)
for (x10 <- 0 until x9) {
val x11 = x8.apply(x10)
val x12 = x11 + 2
x14(x10) = x12
}
val x49 = x14.apply(0)
val x50 = println(x49)
val x23_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x15 <- 0 until x9) {
val x16 = x8.apply(x15)
val x17 = x16 > 20
if (x17) {
val x18 = x16 + 3
x23_builder += x18
}
}
val x23 = x23_builder.result()
val x51 = x23.apply(0)
val x52 = println(x51)
val x30_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x24 <- 0 until x9) {
val x25 = x8.apply(x24)
val x29 = new Array[Int](x25)
for (x26 <- 0 until x25) {
val x27 = x26 + x25
x29(x26) = x27
}
x30_builder ++= x29
}
val x30 = x30_builder.result()
val x53 = x30.apply(0)
val x54 = println(x53)
var x35 = 0
for (x31 <- 0 until x9) {
val x32 = x8.apply(x31)
val x33 = 2 + x32
val x36 = x33
val x37 = x36 + x35
x35 = x37
}
val x38 = x35
val x55 = println(x38)
var x45 = 0
for (x39 <- 0 until x9) {
val x41 = x8.apply(x39)
val x44 = new Array[Int](2)
for (x40 <- 0 until 2) {
val x42 = x41 + x40
x44(x40) = x42
}
for (x58 <- 0 until x44.length) {
val x46 = x44.apply(x58)
val x47 = x46 + x45
x45 = x47
}
}
val x48 = x45
val x56 = println(x48)

-- vertical transformation

(VFT) No producers found for cons Sym(8)

(VFT) Fusing prod Sym(8) with cons Sym(14). Type: Mc_McForlike(Sym(10),Sym(1),Sym(9),Const(100),IfThenElseOneEmpty_Any(Sym(2),Single_MC(Sym(10),(Sym(8),Sym(10)),Sym(3),Sym(13),Sym(4),Sym(14)),Empty_MCSingle(Sym(60),Sym(6),Sym(14)),Sym(14),Sym(7),Sym(14)),Sym(13),Sym(7),Sym(8),Sym(14))
(VFT) Fused prod Sym(8) with cons Sym(14), fused sym: Sym(64)

(VFT) Fusing prod Sym(8) with cons Sym(23). Type: Mc_McForlike(Sym(15),Sym(1),Sym(9),Const(100),IfThenElseOneEmpty_Any(Sym(2),Single_MC(Sym(15),(Sym(8),Sym(15)),Sym(3),Sym(22),Sym(4),Sym(23)),Empty_MCSingle(Sym(68),Sym(6),Sym(23)),Sym(23),Sym(7),Sym(23)),Sym(22),Sym(7),Sym(8),Sym(23))
(VFT) Fused prod Sym(8) with cons Sym(23), fused sym: Sym(75)

(VFT) Fusing prod Sym(8) with cons Sym(30). Type: Mc_McForlike(Sym(24),Sym(1),Sym(9),Const(100),IfThenElseOneEmpty_Any(Sym(2),Single_MC(Sym(24),(Sym(8),Sym(24)),Sym(3),Sym(29),Sym(4),Sym(30)),Empty_MCSingle(Sym(79),Sym(6),Sym(30)),Sym(30),Sym(7),Sym(30)),Sym(29),Sym(7),Sym(8),Sym(30))
  
  (VFT) No producers found for cons Sym(29)
  (VFT) Cons Sym(29) not fused but mirrored to Sym(82) because of previous substitutions or effects
(VFT) Fused prod Sym(8) with cons Sym(30), fused sym: Sym(84)

(VFT) Fusing prod Sym(8) with cons Sym(38). Type: Mc_McForlike(Sym(31),Sym(1),Sym(9),Const(100),IfThenElseOneEmpty_Any(Sym(2),Single_MC(Sym(31),(Sym(8),Sym(31)),Sym(3),Sym(34),Sym(4),Sym(38)),Empty_MCSingle(Sym(88),Sym(6),Sym(38)),Sym(34),Sym(7),Sym(38)),Sym(34),Sym(7),Sym(8),Sym(38))
(VFT) Fused prod Sym(8) with cons Sym(38), fused sym: Sym(92)

(VFT) Fusing prod Sym(8) with cons Sym(48). Type: Mc_McForlike(Sym(39),Sym(1),Sym(9),Const(100),IfThenElseOneEmpty_Any(Sym(2),Single_MC(Sym(39),(Sym(8),Sym(39)),Sym(3),Sym(44),Sym(4),Sym(48)),Empty_MCSingle(Sym(95),Sym(6),Sym(48)),Sym(44),Sym(7),Sym(48)),Sym(44),Sym(7),Sym(8),Sym(48))
  
  (VFT) No producers found for cons Sym(44)
  (VFT) Cons Sym(44) not fused but mirrored to Sym(98) because of previous substitutions or effects
(VFT) Fused prod Sym(8) with cons Sym(48), fused sym: Sym(100)

(VFT) all vertically fused: List(Sym(64), Sym(75), Sym(84), Sym(100), Sym(92), Sym(8))
List(Sym(63), Sym(7), Sym(99), Sym(91), Sym(83), Sym(74))

-- after vertical transformation
val x64_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
if (x2) {
val x3 = x1 + 1
val x61 = x3 + 2
x64_builder += x61
}
}
val x64 = x64_builder.result()
val x65 = x64.apply(0)
val x66 = println(x65)
val x75_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x74 = if (x2) {
val x3 = x1 + 1
val x69 = x3 > 20
val x73 = if (x69) {
val x70 = x3 + 3
val x71 = Array(x70)
x71
} else {
val x72: Array[Int] = Array.empty
x72
}
x73
} else {
val x68: Array[Int] = Array.empty
x68
}
x75_builder ++= x74
}
val x75 = x75_builder.result()
val x76 = x75.apply(0)
val x77 = println(x76)
val x84_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x83 = if (x2) {
val x3 = x1 + 1
val x82 = new Array[Int](x3)
for (x26 <- 0 until x3) {
val x80 = x26 + x3
x82(x26) = x80
}
x82
} else {
val x79: Array[Int] = Array.empty
x79
}
x84_builder ++= x83
}
val x84 = x84_builder.result()
val x85 = x84.apply(0)
val x86 = println(x85)
var x35 = 0
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x91 = if (x2) {
val x3 = x1 + 1
val x89 = 2 + x3
val x90 = Array(x89)
x90
} else {
val x88: Array[Int] = Array.empty
x88
}
for (x103 <- 0 until x91.length) {
val x36 = x91.apply(x103)
val x37 = x36 + x35
x35 = x37
}
}
val x92 = x35
val x93 = println(x92)
var x45 = 0
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x99 = if (x2) {
val x3 = x1 + 1
val x98 = new Array[Int](2)
for (x40 <- 0 until 2) {
val x96 = x3 + x40
x98(x40) = x96
}
x98
} else {
val x95: Array[Int] = Array.empty
x95
}
for (x104 <- 0 until x99.length) {
val x46 = x99.apply(x104)
val x47 = x46 + x45
x45 = x47
}
}
val x100 = x45
val x101 = println(x100)

-- horizontal transformation
(HFT) Recording Sym(64), no fusion
  (HFT) Recording if-sym Sym(63), no fusion
(HFT) Fusing Sym(75) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(100), Sym(48), Sym(92), Sym(38), Sym(84), Sym(30), Sym(75), Sym(23), Sym(64), Sym(8), Sym(14)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(74) with containing fusion set FusedIfSet(cond = Sym(2), ifSyms = List(Sym(99), Sym(91), Sym(83), Sym(74), Sym(7), Sym(63)))
    (HFT) Recording if-sym Sym(73), no fusion
(HFT) Fusing Sym(84) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(100), Sym(48), Sym(92), Sym(38), Sym(84), Sym(30), Sym(75), Sym(23), Sym(64), Sym(8), Sym(14)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(83) with containing fusion set FusedIfSet(cond = Sym(2), ifSyms = List(Sym(99), Sym(91), Sym(83), Sym(74), Sym(7), Sym(63)))
    (HFT) Recording Sym(82), no fusion
(HFT) Fusing Sym(92) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(100), Sym(48), Sym(92), Sym(38), Sym(84), Sym(30), Sym(75), Sym(23), Sym(64), Sym(8), Sym(14)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(91) with containing fusion set FusedIfSet(cond = Sym(2), ifSyms = List(Sym(99), Sym(91), Sym(83), Sym(74), Sym(7), Sym(63)))
(HFT) Fusing Sym(100) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(100), Sym(48), Sym(92), Sym(38), Sym(84), Sym(30), Sym(75), Sym(23), Sym(64), Sym(8), Sym(14)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(99) with containing fusion set FusedIfSet(cond = Sym(2), ifSyms = List(Sym(99), Sym(91), Sym(83), Sym(74), Sym(7), Sym(63)))
    (HFT) Recording Sym(98), no fusion

(HFT) all horizontally fused: List(Sym(64), Sym(75), Sym(84), Sym(92), Sym(100))

-- after horizontal transformation
val x64_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
if (x2) {
val x3 = x1 + 1
val x61 = x3 + 2
x64_builder += x61
}
}
val x64 = x64_builder.result()
val x65 = x64.apply(0)
val x105 = println(x65)
val x75_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x74 = if (x2) {
val x3 = x1 + 1
val x69 = x3 > 20
val x73 = if (x69) {
val x70 = x3 + 3
val x71 = Array(x70)
x71
} else {
val x72: Array[Int] = Array.empty
x72
}
x73
} else {
val x68: Array[Int] = Array.empty
x68
}
x75_builder ++= x74
}
val x75 = x75_builder.result()
val x76 = x75.apply(0)
val x106 = println(x76)
val x84_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x83 = if (x2) {
val x3 = x1 + 1
val x82 = new Array[Int](x3)
for (x26 <- 0 until x3) {
val x80 = x26 + x3
x82(x26) = x80
}
x82
} else {
val x79: Array[Int] = Array.empty
x79
}
x84_builder ++= x83
}
val x84 = x84_builder.result()
val x85 = x84.apply(0)
val x107 = println(x85)
var x35 = 0
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x91 = if (x2) {
val x3 = x1 + 1
val x89 = 2 + x3
val x90 = Array(x89)
x90
} else {
val x88: Array[Int] = Array.empty
x88
}
for (x111 <- 0 until x91.length) {
val x36 = x91.apply(x111)
val x37 = x36 + x35
x35 = x37
}
}
val x92 = x35
val x108 = println(x92)
var x45 = 0
for (x1 <- 0 until 100) {
val x2 = x1 > 10
val x99 = if (x2) {
val x3 = x1 + 1
val x98 = new Array[Int](2)
for (x40 <- 0 until 2) {
val x96 = x3 + x40
x98(x40) = x96
}
x98
} else {
val x95: Array[Int] = Array.empty
x95
}
for (x112 <- 0 until x99.length) {
val x46 = x99.apply(x112)
val x47 = x46 + x45
x45 = x47
}
}
val x100 = x45
val x109 = println(x100)

-- fusion
(CTS) Fusing these loops into one fat TTP: 
TTP(List(Sym(64)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(63))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(63))))))
TTP(List(Sym(75)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(74))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(74))))))
TTP(List(Sym(84)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(83))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(83))))))
TTP(List(Sym(92)),List(SimpleLoop(Const(100),Sym(1),MultiReduceElem(Block(Sym(91)),Block(Sym(37)),Const(0),Sym(35),Sym(36)))),SimpleFatLoop(Const(100),Sym(1),List(MultiReduceElem(Block(Sym(91)),Block(Sym(37)),Const(0),Sym(35),Sym(36)))))
TTP(List(Sym(100)),List(SimpleLoop(Const(100),Sym(1),MultiReduceElem(Block(Sym(99)),Block(Sym(47)),Const(0),Sym(45),Sym(46)))),SimpleFatLoop(Const(100),Sym(1),List(MultiReduceElem(Block(Sym(99)),Block(Sym(47)),Const(0),Sym(45),Sym(46)))))

(CTS) Fusing these ifs into one fat TTP: 
TTP(List(Sym(63)),List(IfThenElse(Sym(2),Block(Sym(62)),Block(Sym(60)))),SimpleFatIfThenElse(Sym(2),List(Block(Sym(62))),List(Block(Sym(60)))))
TTP(List(Sym(74)),List(IfThenElse(Sym(2),Block(Sym(73)),Block(Sym(68)))),SimpleFatIfThenElse(Sym(2),List(Block(Sym(73))),List(Block(Sym(68)))))
TTP(List(Sym(83)),List(IfThenElse(Sym(2),Block(Sym(82)),Block(Sym(79)))),SimpleFatIfThenElse(Sym(2),List(Block(Sym(82))),List(Block(Sym(79)))))
TTP(List(Sym(91)),List(IfThenElse(Sym(2),Block(Sym(90)),Block(Sym(88)))),SimpleFatIfThenElse(Sym(2),List(Block(Sym(90))),List(Block(Sym(88)))))
TTP(List(Sym(99)),List(IfThenElse(Sym(2),Block(Sym(98)),Block(Sym(95)))),SimpleFatIfThenElse(Sym(2),List(Block(Sym(98))),List(Block(Sym(95)))))

val x64_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x75_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x84_builder = new scala.collection.mutable.ArrayBuilder.ofInt
var x35 = 0
var x45 = 0
for (x1 <- 0 until 100) {
val x2 = x1 > 10
// TODO: use vars instead of tuples to return multiple values
val (x63,x74,x83,x91,x99) = if (x2) {
val x3 = x1 + 1
val x61 = x3 + 2
val x62 = Array(x61)
val x69 = x3 > 20
val x73 = if (x69) {
val x70 = x3 + 3
val x71 = Array(x70)
x71
} else {
val x72: Array[Int] = Array.empty
x72
}
val x82 = new Array[Int](x3)
for (x26 <- 0 until x3) {
val x80 = x26 + x3
x82(x26) = x80
}
val x89 = 2 + x3
val x90 = Array(x89)
val x98 = new Array[Int](2)
for (x40 <- 0 until 2) {
val x96 = x3 + x40
x98(x40) = x96
}
(x62,x73,x82,x90,x98)
} else {
val x60: Array[Int] = Array.empty
val x68: Array[Int] = Array.empty
val x79: Array[Int] = Array.empty
val x88: Array[Int] = Array.empty
val x95: Array[Int] = Array.empty
(x60,x68,x79,x88,x95)
}
x64_builder ++= x63
x75_builder ++= x74
x84_builder ++= x83
for (x113 <- 0 until x91.length) {
val x36 = x91.apply(x113)
val x37 = x36 + x35
x35 = x37
}
for (x114 <- 0 until x99.length) {
val x46 = x99.apply(x114)
val x47 = x46 + x45
x45 = x47
}
}
val x64 = x64_builder.result()
val x75 = x75_builder.result()
val x84 = x84_builder.result()
val x92 = x35
val x100 = x45
val x65 = x64.apply(0)
val x105 = println(x65)
val x76 = x75.apply(0)
val x106 = println(x76)
val x85 = x84.apply(0)
val x107 = println(x85)
val x108 = println(x92)
val x109 = println(x100)
-- done
