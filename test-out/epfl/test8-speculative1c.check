-- fatten effectful if/then/else TP(Sym(10),Reflect(IfThenElse(Sym(2),Block(Sym(7)),Block(Sym(9))),Summary(true,false,false,false,false,List(),List(),List(),List()),List()))
-- fatten effectful if/then/else TP(Sym(8),Reflect(IfThenElse(Sym(2),Block(Sym(4)),Block(Sym(7))),Summary(false,false,false,false,false,List(Sym(1)),List(),List(Sym(1)),List()),List(Sym(1))))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
var x1: Int = 7
val x2 = 7 > x0
// TODO: use vars instead of tuples to return multiple values
val (x10,x8) = if (x2) {
x1 = 5
((),())
} else {
val x5 = println("no")
((),())
}
val x12 = x1
val x13 = println(x12)
x13
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
