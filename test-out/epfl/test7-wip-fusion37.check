-- full graph
TP(Sym(3),IntPlus(Sym(1),Sym(2)))
TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5)))))
TP(Sym(9),IntPlus(Sym(7),Sym(8)))
TP(Sym(10),IntPlus(Sym(9),Const(2)))
TP(Sym(11),SimpleLoop(Const(10),Sym(8),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayIndex(Sym(11),Const(0)))
TP(Sym(13),SimpleLoop(Const(30),Sym(7),ArrayElem(Block(Sym(12)))))
TP(Sym(16),IntPlus(Sym(14),Sym(15)))
TP(Sym(17),IntPlus(Sym(16),Const(3)))
TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))
TP(Sym(19),ArrayIndex(Sym(18),Const(0)))
TP(Sym(20),SimpleLoop(Const(30),Sym(14),ArrayElem(Block(Sym(19)))))
TP(Sym(21),ArrayIndex(Sym(6),Const(0)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(23),ArrayIndex(Sym(13),Const(0)))
TP(Sym(24),Reflect(Print(Sym(23)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22))))
TP(Sym(25),ArrayIndex(Sym(20),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(24))))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22), Sym(24), Sym(26))))

-- before transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x13 = new Array[Int](30)
for (x7 <- 0 until 30) {
var x11 = new Array[Int](10)
for (x8 <- 0 until 10) {
val x9 = x7 + x8
val x10 = x9 + 2
x11(x8) = x10
}
val x12 = x11.apply(0)
x13(x7) = x12
}
val x23 = x13.apply(0)
val x24 = println(x23)
var x20 = new Array[Int](30)
for (x14 <- 0 until 30) {
var x18 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x16 = x14 + x15
val x17 = x16 + 3
x18(x15) = x17
}
val x19 = x18.apply(0)
x20(x14) = x19
}
val x25 = x20.apply(0)
val x26 = println(x25)

-- vertical transformation

  
  (VFT) No producers found for TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5)))))

  
  (VFT) No producers found for TP(Sym(11),SimpleLoop(Const(10),Sym(8),ArrayElem(Block(Sym(10))))), changed to Sym(31) because of existing substitutions or to reflect effects
(VFT) No producers found for TP(Sym(13),SimpleLoop(Const(30),Sym(7),ArrayElem(Block(Sym(12))))), remapping to Sym(33) because of fixed shape

  
  (VFT) No producers found for TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17))))), changed to Sym(38) because of existing substitutions or to reflect effects
(VFT) No producers found for TP(Sym(20),SimpleLoop(Const(30),Sym(14),ArrayElem(Block(Sym(19))))), remapping to Sym(40) because of fixed shape

(VFT) all vertically fused: 

-- after vertical transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x28 = println(x21)
var x33 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x31 = new Array[Int](10)
for (x8 <- 0 until 10) {
val x29 = x1 + x8
val x30 = x29 + 2
x31(x8) = x30
}
val x32 = x31.apply(0)
x33(x1) = x32
}
val x34 = x33.apply(0)
val x35 = println(x34)
var x40 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x38 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x36 = x1 + x15
val x37 = x36 + 3
x38(x15) = x37
}
val x39 = x38.apply(0)
x40(x1) = x39
}
val x41 = x40.apply(0)
val x42 = println(x41)

-- horizontal transformation
(HFT) Recording Sym(6), no fusion
  (HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(33) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(6)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(31) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4)))
  (HFT) - remapping index: Sym(8) -> Sym(2)
  (HFT) - new loop symbol: Sym(31) -> Sym(46)
(HFT) - new loop symbol: Sym(33) -> Sym(48)
(HFT) Fusing Sym(40) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(6), Sym(33)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(38) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4), Sym(31)))
  (HFT) - remapping index: Sym(15) -> Sym(2)
  (HFT) - new loop symbol: Sym(38) -> Sym(52)
(HFT) - new loop symbol: Sym(40) -> Sym(54)

(HFT) all horizontally fused: List(Sym(4), Sym(46), Sym(52))
List(Sym(6), Sym(48), Sym(54))

-- after horizontal transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x44 = println(x21)
var x48 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x46 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x45 = x3 + 2
x46(x2) = x45
}
val x47 = x46.apply(0)
x48(x1) = x47
}
val x49 = x48.apply(0)
val x50 = println(x49)
var x54 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x52 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x51 = x3 + 3
x52(x2) = x51
}
val x53 = x52.apply(0)
x54(x1) = x53
}
val x55 = x54.apply(0)
val x56 = println(x55)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(3))))))
TTP(List(Sym(46)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(45))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(45))))))
TTP(List(Sym(52)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(51))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(51))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(6)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(5))))))
TTP(List(Sym(48)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(47))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(47))))))
TTP(List(Sym(54)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(53))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(53))))))

var x6 = new Array[Int](30)
var x48 = new Array[Int](30)
var x54 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
var x46 = new Array[Int](10)
var x52 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x45 = x3 + 2
val x51 = x3 + 3
x4(x2) = x3
x46(x2) = x45
x52(x2) = x51
}
val x5 = x4.apply(0)
val x47 = x46.apply(0)
val x53 = x52.apply(0)
x6(x1) = x5
x48(x1) = x47
x54(x1) = x53
}
val x21 = x6.apply(0)
val x44 = println(x21)
val x49 = x48.apply(0)
val x50 = println(x49)
val x55 = x54.apply(0)
val x56 = println(x55)
-- done
