-- full graph
TP(Sym(3),IntPlus(Sym(1),Sym(2)))
TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5)))))
TP(Sym(9),IntPlus(Sym(7),Sym(8)))
TP(Sym(10),IntPlus(Sym(9),Const(2)))
TP(Sym(11),SimpleLoop(Const(10),Sym(8),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayIndex(Sym(11),Const(0)))
TP(Sym(13),SimpleLoop(Const(30),Sym(7),ArrayElem(Block(Sym(12)))))
TP(Sym(16),IntPlus(Sym(14),Sym(15)))
TP(Sym(17),IntPlus(Sym(16),Const(3)))
TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))
TP(Sym(19),ArrayIndex(Sym(18),Const(0)))
TP(Sym(20),SimpleLoop(Const(30),Sym(14),ArrayElem(Block(Sym(19)))))
TP(Sym(21),ArrayIndex(Sym(6),Const(0)))
TP(Sym(22),Reflect(Print(Sym(21)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(23),ArrayIndex(Sym(13),Const(0)))
TP(Sym(24),Reflect(Print(Sym(23)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22))))
TP(Sym(25),ArrayIndex(Sym(20),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(24))))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(22), Sym(24), Sym(26))))

-- before transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x13 = new Array[Int](30)
for (x7 <- 0 until 30) {
var x11 = new Array[Int](10)
for (x8 <- 0 until 10) {
val x9 = x7 + x8
val x10 = x9 + 2
x11(x8) = x10
}
val x12 = x11.apply(0)
x13(x7) = x12
}
val x23 = x13.apply(0)
val x24 = println(x23)
var x20 = new Array[Int](30)
for (x14 <- 0 until 30) {
var x18 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x16 = x14 + x15
val x17 = x16 + 3
x18(x15) = x17
}
val x19 = x18.apply(0)
x20(x14) = x19
}
val x25 = x20.apply(0)
val x26 = println(x25)

-- vertical transformation

  
  (VFT) No producers found for TP(Sym(4),SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3)))))
(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5)))))

  
  (VFT) No producers found for TP(Sym(11),SimpleLoop(Const(10),Sym(8),ArrayElem(Block(Sym(10)))))
(VFT) No producers found for TP(Sym(13),SimpleLoop(Const(30),Sym(7),ArrayElem(Block(Sym(12))))), remapping to Sym(32) because of fixed shape

  
  (VFT) No producers found for TP(Sym(18),SimpleLoop(Const(10),Sym(15),ArrayElem(Block(Sym(17)))))
(VFT) No producers found for TP(Sym(20),SimpleLoop(Const(30),Sym(14),ArrayElem(Block(Sym(19))))), remapping to Sym(39) because of fixed shape

(VFT) all vertically fused: 

-- after vertical transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x32 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x30 = new Array[Int](10)
for (x8 <- 0 until 10) {
val x28 = x1 + x8
val x29 = x28 + 2
x30(x8) = x29
}
val x31 = x30.apply(0)
x32(x1) = x31
}
val x33 = x32.apply(0)
val x34 = println(x33)
var x39 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x37 = new Array[Int](10)
for (x15 <- 0 until 10) {
val x35 = x1 + x15
val x36 = x35 + 3
x37(x15) = x36
}
val x38 = x37.apply(0)
x39(x1) = x38
}
val x40 = x39.apply(0)
val x41 = println(x40)

-- horizontal transformation
(HFT) Recording Sym(6), no fusion
  (HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(32) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(6)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(30) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4)))
  (HFT) - remapping index: Sym(8) -> Sym(2)
  (HFT) - new loop symbol: Sym(30) -> Sym(45)
(HFT) - new loop symbol: Sym(32) -> Sym(47)
(HFT) Fusing Sym(39) with fusion set FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(6), Sym(32)))
(HFT) - already using same index Sym(1)
  (HFT) Fusing Sym(37) with fusion set FusedSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(4), Sym(30)))
  (HFT) - remapping index: Sym(15) -> Sym(2)
  (HFT) - new loop symbol: Sym(37) -> Sym(51)
(HFT) - new loop symbol: Sym(39) -> Sym(53)

(HFT) all horizontally fused: List(Sym(4), Sym(45), Sym(51))
List(Sym(6), Sym(47), Sym(53))

-- after horizontal transformation
var x6 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
x4(x2) = x3
}
val x5 = x4.apply(0)
x6(x1) = x5
}
val x21 = x6.apply(0)
val x22 = println(x21)
var x47 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x45 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x44 = x3 + 2
x45(x2) = x44
}
val x46 = x45.apply(0)
x47(x1) = x46
}
val x48 = x47.apply(0)
val x49 = println(x48)
var x53 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x51 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x50 = x3 + 3
x51(x2) = x50
}
val x52 = x51.apply(0)
x53(x1) = x52
}
val x54 = x53.apply(0)
val x55 = println(x54)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(3))))))
TTP(List(Sym(45)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(44))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(44))))))
TTP(List(Sym(51)),List(SimpleLoop(Const(10),Sym(2),ArrayElem(Block(Sym(50))))),SimpleFatLoop(Const(10),Sym(2),List(ArrayElem(Block(Sym(50))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(6)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(5))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(5))))))
TTP(List(Sym(47)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(46))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(46))))))
TTP(List(Sym(53)),List(SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(52))))),SimpleFatLoop(Const(30),Sym(1),List(ArrayElem(Block(Sym(52))))))

var x6 = new Array[Int](30)
var x47 = new Array[Int](30)
var x53 = new Array[Int](30)
for (x1 <- 0 until 30) {
var x4 = new Array[Int](10)
var x45 = new Array[Int](10)
var x51 = new Array[Int](10)
for (x2 <- 0 until 10) {
val x3 = x1 + x2
val x44 = x3 + 2
val x50 = x3 + 3
x4(x2) = x3
x45(x2) = x44
x51(x2) = x50
}
val x5 = x4.apply(0)
val x46 = x45.apply(0)
val x52 = x51.apply(0)
x6(x1) = x5
x47(x1) = x46
x53(x1) = x52
}
val x21 = x6.apply(0)
val x22 = println(x21)
val x48 = x47.apply(0)
val x49 = println(x48)
val x54 = x53.apply(0)
val x55 = println(x54)
-- done
