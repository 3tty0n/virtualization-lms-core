-- full graph
TP(Sym(3),OrderingGT(Sym(2),Const(5)))
TP(Sym(4),IntPlus(Sym(2),Const(1)))
TP(Sym(5),SingletonInLoop(Block(Sym(4)),Sym(2)))
TP(Sym(7),EmptyArrayInLoop(Sym(2),Sym(6)))
TP(Sym(8),IfThenElse(Sym(3),Block(Sym(5)),Block(Sym(7))))
TP(Sym(9),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))))
TP(Sym(10),SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(9)))))
TP(Sym(11),ArrayLength(Sym(10)))
TP(Sym(13),ArrayIndex(Sym(10),Sym(12)))
TP(Sym(14),IntPlus(Sym(13),Const(2)))
TP(Sym(15),SingletonInLoop(Block(Sym(14)),Sym(12)))
TP(Sym(16),SimpleLoop(Sym(11),Sym(12),MultiArrayElem(Block(Sym(15)))))
TP(Sym(18),ArrayIndex(Sym(10),Sym(17)))
TP(Sym(19),OrderingGT(Sym(18),Const(20)))
TP(Sym(20),IntPlus(Sym(18),Const(3)))
TP(Sym(21),SingletonInLoop(Block(Sym(20)),Sym(17)))
TP(Sym(23),EmptyArrayInLoop(Sym(17),Sym(22)))
TP(Sym(24),IfThenElse(Sym(19),Block(Sym(21)),Block(Sym(23))))
TP(Sym(25),SimpleLoop(Sym(11),Sym(17),MultiArrayElem(Block(Sym(24)))))
TP(Sym(27),ArrayIndex(Sym(10),Sym(26)))
TP(Sym(29),IntPlus(Sym(27),Sym(28)))
TP(Sym(30),SingletonInLoop(Block(Sym(29)),Sym(28)))
TP(Sym(31),SimpleLoop(Sym(27),Sym(28),MultiArrayElem(Block(Sym(30)))))
TP(Sym(32),SimpleLoop(Sym(11),Sym(26),MultiArrayElem(Block(Sym(31)))))
TP(Sym(34),ArrayIndex(Sym(10),Sym(33)))
TP(Sym(35),IntPlus(Const(2),Sym(34)))
TP(Sym(36),SingletonInLoop(Block(Sym(35)),Sym(33)))
TP(Sym(39),NumericPlus(Sym(38),Sym(37)))
TP(Sym(40),SimpleLoop(Sym(11),Sym(33),MultiReduceElem(Block(Sym(36)),Block(Sym(39)),Const(0),Sym(37),Sym(38))))
TP(Sym(43),ArrayIndex(Sym(10),Sym(41)))
TP(Sym(44),IntPlus(Sym(43),Sym(42)))
TP(Sym(45),SingletonInLoop(Block(Sym(44)),Sym(42)))
TP(Sym(46),SimpleLoop(Const(2),Sym(42),MultiArrayElem(Block(Sym(45)))))
TP(Sym(49),IntPlus(Sym(48),Sym(47)))
TP(Sym(50),SimpleLoop(Sym(11),Sym(41),MultiReduceElem(Block(Sym(46)),Block(Sym(49)),Const(0),Sym(47),Sym(48))))
TP(Sym(51),ArrayIndex(Sym(16),Const(0)))
TP(Sym(52),Reflect(Print(Sym(51)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(53),ArrayIndex(Sym(25),Const(0)))
TP(Sym(54),Reflect(Print(Sym(53)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(52))))
TP(Sym(55),ArrayIndex(Sym(32),Const(0)))
TP(Sym(56),Reflect(Print(Sym(55)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(54))))
TP(Sym(57),Reflect(Print(Sym(40)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(56))))
TP(Sym(58),Reflect(Print(Sym(50)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(57))))
TP(Sym(59),Reify(Sym(58),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(52), Sym(54), Sym(56), Sym(57), Sym(58))))

-- before transformation
val x9_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
x9_builder += x4
}
}
val x9 = x9_builder.result()
val x10_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x10_builder ++= x9
}
val x10 = x10_builder.result()
val x11 = x10.length
val x16 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x10.apply(x12)
val x14 = x13 + 2
x16(x12) = x14
}
val x51 = x16.apply(0)
val x52 = println(x51)
val x25_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x17 <- 0 until x11) {
val x18 = x10.apply(x17)
val x19 = x18 > 20
if (x19) {
val x20 = x18 + 3
x25_builder += x20
}
}
val x25 = x25_builder.result()
val x53 = x25.apply(0)
val x54 = println(x53)
val x32_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x26 <- 0 until x11) {
val x27 = x10.apply(x26)
val x31 = new Array[Int](x27)
for (x28 <- 0 until x27) {
val x29 = x27 + x28
x31(x28) = x29
}
x32_builder ++= x31
}
val x32 = x32_builder.result()
val x55 = x32.apply(0)
val x56 = println(x55)
var x37 = 0
for (x33 <- 0 until x11) {
val x34 = x10.apply(x33)
val x35 = 2 + x34
val x38 = x35
val x39 = x38 + x37
x37 = x39
}
val x40 = x37
val x57 = println(x40)
var x47 = 0
for (x41 <- 0 until x11) {
val x43 = x10.apply(x41)
val x46 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x44 = x43 + x42
x46(x42) = x44
}
for (x60 <- 0 until x46.length) {
val x48 = x46.apply(x60)
val x49 = x48 + x47
x47 = x49
}
}
val x50 = x47
val x58 = println(x50)

-- vertical transformation

(VFT) No producers found for cons Sym(9)

(VFT) No producers found for cons Sym(10)

(VFT) Fusing prod Sym(10) with cons Sym(16). Type: Mc_McForlike(Sym(12),Sym(1),Sym(11),Const(30),Mc_McForlike(Sym(12),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_MC(Sym(12),(Sym(10),Sym(12)),Sym(4),Sym(15),Sym(5),Sym(16)),Empty_MCSingle(Sym(62),Sym(7),Sym(16)),Sym(16),Sym(8),Sym(16)),Sym(15),Sym(8),Sym(9),Sym(16)),Sym(15),Sym(9),Sym(10),Sym(16))
(VFT) Fused prod Sym(10) with cons Sym(16), fused sym: Sym(67)

(VFT) Fusing prod Sym(10) with cons Sym(25). Type: Mc_McForlike(Sym(17),Sym(1),Sym(11),Const(30),Mc_McForlike(Sym(17),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_MC(Sym(17),(Sym(10),Sym(17)),Sym(4),Sym(24),Sym(5),Sym(25)),Empty_MCSingle(Sym(71),Sym(7),Sym(25)),Sym(25),Sym(8),Sym(25)),Sym(24),Sym(8),Sym(9),Sym(25)),Sym(24),Sym(9),Sym(10),Sym(25))
(VFT) Fused prod Sym(10) with cons Sym(25), fused sym: Sym(79)

(VFT) Fusing prod Sym(10) with cons Sym(32). Type: Mc_McForlike(Sym(26),Sym(1),Sym(11),Const(30),Mc_McForlike(Sym(26),Sym(2),Sym(11),Const(10),IfThenElseOneEmpty_Any(Sym(3),Single_MC(Sym(26),(Sym(10),Sym(26)),Sym(4),Sym(31),Sym(5),Sym(32)),Empty_MCSingle(Sym(83),Sym(7),Sym(32)),Sym(32),Sym(8),Sym(32)),Sym(31),Sym(8),Sym(9),Sym(32)),Sym(31),Sym(9),Sym(10),Sym(32))
  
  (VFT) No producers found for cons Sym(31)
  (VFT) Cons Sym(31) not fused but mirrored to Sym(86) because of previous substitutions or effects
(VFT) Fused prod Sym(10) with cons Sym(32), fused sym: Sym(89)

(VFT) Fusing prod Sym(10) with cons Sym(40). Type: Mc_McForlike(Sym(33),Sym(1),Sym(11),Const(30),InnerMC_Red(Sym(33),Sym(2),IfThenElseOneEmpty_Any(Sym(3),Single_MC(Sym(33),(Sym(10),Sym(33)),Sym(4),Sym(36),Sym(5),Sym(40)),Empty_MCSingle(Sym(93),Sym(7),Sym(40)),Sym(36),Sym(8),Sym(40)),Sym(36),Sym(8),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))),Sym(9),Sym(40)),Sym(36),Sym(9),Sym(10),Sym(40))
(VFT) Fused prod Sym(10) with cons Sym(40), fused sym: Sym(98)

(VFT) Fusing prod Sym(10) with cons Sym(50). Type: Mc_McForlike(Sym(41),Sym(1),Sym(11),Const(30),InnerMC_Red(Sym(41),Sym(2),IfThenElseOneEmpty_Any(Sym(3),Single_MC(Sym(41),(Sym(10),Sym(41)),Sym(4),Sym(46),Sym(5),Sym(50)),Empty_MCSingle(Sym(101),Sym(7),Sym(50)),Sym(46),Sym(8),Sym(50)),Sym(46),Sym(8),SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(8)))),Sym(9),Sym(50)),Sym(46),Sym(9),Sym(10),Sym(50))
  
  (VFT) No producers found for cons Sym(46)
  (VFT) Cons Sym(46) not fused but mirrored to Sym(104) because of previous substitutions or effects
(VFT) Fused prod Sym(10) with cons Sym(50), fused sym: Sym(107)

(VFT) all vertically fused: List(Sym(77), Sym(105), Sym(87), Sym(65), Sym(8), Sym(96))
List(Sym(10), Sym(98), Sym(89), Sym(67), Sym(107), Sym(79))
List(Sym(88), Sym(106), Sym(66), Sym(97), Sym(78), Sym(9))

-- after vertical transformation
val x66_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x63 = x4 + 2
x66_builder += x63
}
}
val x66 = x66_builder.result()
val x67_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x67_builder ++= x66
}
val x67 = x67_builder.result()
val x68 = x67.apply(0)
val x69 = println(x68)
val x78_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x77 = if (x3) {
val x4 = x2 + 1
val x72 = x4 > 20
val x76 = if (x72) {
val x73 = x4 + 3
val x74 = Array(x73)
x74
} else {
val x75: Array[Int] = Array.empty
x75
}
x76
} else {
val x71: Array[Int] = Array.empty
x71
}
x78_builder ++= x77
}
val x78 = x78_builder.result()
val x79_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x79_builder ++= x78
}
val x79 = x79_builder.result()
val x80 = x79.apply(0)
val x81 = println(x80)
val x88_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x87 = if (x3) {
val x4 = x2 + 1
val x86 = new Array[Int](x4)
for (x28 <- 0 until x4) {
val x84 = x4 + x28
x86(x28) = x84
}
x86
} else {
val x83: Array[Int] = Array.empty
x83
}
x88_builder ++= x87
}
val x88 = x88_builder.result()
val x89_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x89_builder ++= x88
}
val x89 = x89_builder.result()
val x90 = x89.apply(0)
val x91 = println(x90)
val x97_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x94 = 2 + x4
x97_builder += x94
}
}
val x97 = x97_builder.result()
var x37 = 0
for (x1 <- 0 until 30) {
for (x110 <- 0 until x97.length) {
val x38 = x97.apply(x110)
val x39 = x38 + x37
x37 = x39
}
}
val x98 = x37
val x99 = println(x98)
val x106_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x105 = if (x3) {
val x4 = x2 + 1
val x104 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x102 = x4 + x42
x104(x42) = x102
}
x104
} else {
val x101: Array[Int] = Array.empty
x101
}
x106_builder ++= x105
}
val x106 = x106_builder.result()
var x47 = 0
for (x1 <- 0 until 30) {
for (x111 <- 0 until x106.length) {
val x48 = x106.apply(x111)
val x49 = x48 + x47
x47 = x49
}
}
val x107 = x47
val x108 = println(x107)

-- horizontal transformation
(HFT) Recording Sym(66), no fusion
  (HFT) Recording if-sym Sym(65), no fusion
(HFT) Recording Sym(67), no fusion
(HFT) Fusing Sym(78) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(88), Sym(106), Sym(66), Sym(97), Sym(78), Sym(9)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(77) with fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(65)))
    (HFT) Recording if-sym Sym(76), no fusion
(HFT) Fusing Sym(79) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(10), Sym(98), Sym(89), Sym(67), Sym(107), Sym(79)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(88) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(88), Sym(106), Sym(66), Sym(97), Sym(78), Sym(9)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(87) with fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(65), Sym(77)))
    (HFT) Recording Sym(86), no fusion
(HFT) Fusing Sym(89) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(10), Sym(98), Sym(89), Sym(67), Sym(107), Sym(79)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(97) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(88), Sym(106), Sym(66), Sym(97), Sym(78), Sym(9)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(96) with fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(65), Sym(77), Sym(87)))
(HFT) Fusing Sym(98) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(10), Sym(98), Sym(89), Sym(67), Sym(107), Sym(79)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(106) with containing fusion set FusedLoopSet(shape = Const(10), indexSym = Sym(2), loopSyms = List(Sym(88), Sym(106), Sym(66), Sym(97), Sym(78), Sym(9)))
(HFT) - already using same index Sym(2)
  (HFT) Fusing Sym(105) with fusion set FusedIfSet(cond = Sym(3), ifSyms = List(Sym(65), Sym(77), Sym(87), Sym(96)))
    (HFT) Recording Sym(104), no fusion
(HFT) Fusing Sym(107) with containing fusion set FusedLoopSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(10), Sym(98), Sym(89), Sym(67), Sym(107), Sym(79)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(67), Sym(79), Sym(89), Sym(98), Sym(107))
List(Sym(66), Sym(78), Sym(88), Sym(97), Sym(106))

-- after horizontal transformation
val x66_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x63 = x4 + 2
x66_builder += x63
}
}
val x66 = x66_builder.result()
val x67_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x67_builder ++= x66
}
val x67 = x67_builder.result()
val x68 = x67.apply(0)
val x112 = println(x68)
val x78_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x77 = if (x3) {
val x4 = x2 + 1
val x72 = x4 > 20
val x76 = if (x72) {
val x73 = x4 + 3
val x74 = Array(x73)
x74
} else {
val x75: Array[Int] = Array.empty
x75
}
x76
} else {
val x71: Array[Int] = Array.empty
x71
}
x78_builder ++= x77
}
val x78 = x78_builder.result()
val x79_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x79_builder ++= x78
}
val x79 = x79_builder.result()
val x80 = x79.apply(0)
val x113 = println(x80)
val x88_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x87 = if (x3) {
val x4 = x2 + 1
val x86 = new Array[Int](x4)
for (x28 <- 0 until x4) {
val x84 = x4 + x28
x86(x28) = x84
}
x86
} else {
val x83: Array[Int] = Array.empty
x83
}
x88_builder ++= x87
}
val x88 = x88_builder.result()
val x89_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x1 <- 0 until 30) {
x89_builder ++= x88
}
val x89 = x89_builder.result()
val x90 = x89.apply(0)
val x114 = println(x90)
val x97_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
if (x3) {
val x4 = x2 + 1
val x94 = 2 + x4
x97_builder += x94
}
}
val x97 = x97_builder.result()
var x37 = 0
for (x1 <- 0 until 30) {
for (x118 <- 0 until x97.length) {
val x38 = x97.apply(x118)
val x39 = x38 + x37
x37 = x39
}
}
val x98 = x37
val x115 = println(x98)
val x106_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
val x105 = if (x3) {
val x4 = x2 + 1
val x104 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x102 = x4 + x42
x104(x42) = x102
}
x104
} else {
val x101: Array[Int] = Array.empty
x101
}
x106_builder ++= x105
}
val x106 = x106_builder.result()
var x47 = 0
for (x1 <- 0 until 30) {
for (x119 <- 0 until x106.length) {
val x48 = x106.apply(x119)
val x49 = x48 + x47
x47 = x49
}
}
val x107 = x47
val x116 = println(x107)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(66)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(65))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(65))))))
TTP(List(Sym(78)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(77))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(77))))))
TTP(List(Sym(88)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(87))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(87))))))
TTP(List(Sym(97)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(96))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(96))))))
TTP(List(Sym(106)),List(SimpleLoop(Const(10),Sym(2),MultiArrayElem(Block(Sym(105))))),SimpleFatLoop(Const(10),Sym(2),List(MultiArrayElem(Block(Sym(105))))))

(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(67)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(66))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(66))))))
TTP(List(Sym(79)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(78))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(78))))))
TTP(List(Sym(89)),List(SimpleLoop(Const(30),Sym(1),MultiArrayElem(Block(Sym(88))))),SimpleFatLoop(Const(30),Sym(1),List(MultiArrayElem(Block(Sym(88))))))
TTP(List(Sym(98)),List(SimpleLoop(Const(30),Sym(1),MultiReduceElem(Block(Sym(97)),Block(Sym(39)),Const(0),Sym(37),Sym(38)))),SimpleFatLoop(Const(30),Sym(1),List(MultiReduceElem(Block(Sym(97)),Block(Sym(39)),Const(0),Sym(37),Sym(38)))))
TTP(List(Sym(107)),List(SimpleLoop(Const(30),Sym(1),MultiReduceElem(Block(Sym(106)),Block(Sym(49)),Const(0),Sym(47),Sym(48)))),SimpleFatLoop(Const(30),Sym(1),List(MultiReduceElem(Block(Sym(106)),Block(Sym(49)),Const(0),Sym(47),Sym(48)))))

(FTO) Fusing these ifs into one fat TTP: 
TTP(List(Sym(65)),List(IfThenElse(Sym(3),Block(Sym(64)),Block(Sym(62)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(64))),List(Block(Sym(62)))))
TTP(List(Sym(77)),List(IfThenElse(Sym(3),Block(Sym(76)),Block(Sym(71)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(76))),List(Block(Sym(71)))))
TTP(List(Sym(87)),List(IfThenElse(Sym(3),Block(Sym(86)),Block(Sym(83)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(86))),List(Block(Sym(83)))))
TTP(List(Sym(96)),List(IfThenElse(Sym(3),Block(Sym(95)),Block(Sym(93)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(95))),List(Block(Sym(93)))))
TTP(List(Sym(105)),List(IfThenElse(Sym(3),Block(Sym(104)),Block(Sym(101)))),SimpleFatIfThenElse(Sym(3),List(Block(Sym(104))),List(Block(Sym(101)))))

val x66_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x78_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x88_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x97_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x106_builder = new scala.collection.mutable.ArrayBuilder.ofInt
for (x2 <- 0 until 10) {
val x3 = x2 > 5
// TODO: use vars instead of tuples to return multiple values
val (x65,x77,x87,x96,x105) = if (x3) {
val x4 = x2 + 1
val x63 = x4 + 2
val x64 = Array(x63)
val x72 = x4 > 20
val x76 = if (x72) {
val x73 = x4 + 3
val x74 = Array(x73)
x74
} else {
val x75: Array[Int] = Array.empty
x75
}
val x86 = new Array[Int](x4)
for (x28 <- 0 until x4) {
val x84 = x4 + x28
x86(x28) = x84
}
val x94 = 2 + x4
val x95 = Array(x94)
val x104 = new Array[Int](2)
for (x42 <- 0 until 2) {
val x102 = x4 + x42
x104(x42) = x102
}
(x64,x76,x86,x95,x104)
} else {
val x62: Array[Int] = Array.empty
val x71: Array[Int] = Array.empty
val x83: Array[Int] = Array.empty
val x93: Array[Int] = Array.empty
val x101: Array[Int] = Array.empty
(x62,x71,x83,x93,x101)
}
x66_builder ++= x65
x78_builder ++= x77
x88_builder ++= x87
x97_builder ++= x96
x106_builder ++= x105
}
val x66 = x66_builder.result()
val x78 = x78_builder.result()
val x88 = x88_builder.result()
val x97 = x97_builder.result()
val x106 = x106_builder.result()
val x67_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x79_builder = new scala.collection.mutable.ArrayBuilder.ofInt
val x89_builder = new scala.collection.mutable.ArrayBuilder.ofInt
var x37 = 0
var x47 = 0
for (x1 <- 0 until 30) {
x67_builder ++= x66
x79_builder ++= x78
x89_builder ++= x88
for (x120 <- 0 until x97.length) {
val x38 = x97.apply(x120)
val x39 = x38 + x37
x37 = x39
}
for (x121 <- 0 until x106.length) {
val x48 = x106.apply(x121)
val x49 = x48 + x47
x47 = x49
}
}
val x67 = x67_builder.result()
val x79 = x79_builder.result()
val x89 = x89_builder.result()
val x98 = x37
val x107 = x47
val x68 = x67.apply(0)
val x112 = println(x68)
val x80 = x79.apply(0)
val x113 = println(x80)
val x90 = x89.apply(0)
val x114 = println(x90)
val x115 = println(x98)
val x116 = println(x107)
-- done
