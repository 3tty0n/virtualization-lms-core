gathering liveness info for block Block(Sym(41))
dropping TP(Sym(32),Reflect(NewVar(Const(2)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()))
dropping TP(Sym(1),Reflect(NewVar(Const(7)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()))
violated ordering of effects: expected 
    List(Sym(1), Sym(2), Sym(37), Sym(38), Sym(39), Sym(40))
but got
    List(TP(Sym(2),Reflect(NewVar(Const(0.0)),Summary(false,false,false,false,true,List(),List(),List(),List()),List())), TP(Sym(37),Reflect(While(Block(Sym(27)),Block(Sym(36))),Summary(true,true,false,false,false,List(Sym(2)),List(Sym(2)),List(Sym(2)),List(Sym(2))),List(Sym(2)))), TP(Sym(38),Reflect(Print(Const(7)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(37)))), TP(Sym(39),Reflect(ReadVar(Variable(Sym(2))),Summary(false,false,false,false,false,List(Sym(2)),List(Sym(2)),List(),List()),List(Sym(2), Sym(37)))), TP(Sym(40),Reflect(Print(Sym(39)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(37), Sym(38)))))
gathering liveness info for block Block(Sym(27))
gathering liveness info for block Block(Sym(36))
violated ordering of effects: expected 
    List(Sym(28), Sym(29), Sym(30), Sym(31), Sym(32), Sym(34), Sym(35))
but got
    List(TP(Sym(28),Reflect(PreviousIteration(),Summary(true,true,false,false,false,List(Sym(2)),List(Sym(2)),List(Sym(2)),List(Sym(2))),List(Sym(2)))), TP(Sym(29),Reflect(Print(Const(7)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(28)))), TP(Sym(30),Reflect(ReadVar(Variable(Sym(2))),Summary(false,false,false,false,false,List(Sym(2)),List(Sym(2)),List(),List()),List(Sym(2), Sym(28)))), TP(Sym(31),Reflect(Print(Sym(30)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(28), Sym(29)))), TP(Sym(34),Reflect(Assign(Variable(Sym(2)),Sym(33)),Summary(false,false,false,false,false,List(Sym(2)),List(Sym(2)),List(Sym(2)),List(Sym(2))),List(Sym(2), Sym(28), Sym(30)))), TP(Sym(35),Reflect(Print(Const(2)),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(28), Sym(29), Sym(31)))))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
var x2: Double = 0.0
val x37 = while ({val x25 = x2
val x26 = x25 < 10.0
x26}) {
val x29 = println(7)
val x30 = x2
val x31 = println(x30)
val x33 = x30+1.0
x2 = x33
val x35 = println(2)
x35
}
val x38 = println(7)
val x39 = x2
val x40 = println(x39)
x40
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
