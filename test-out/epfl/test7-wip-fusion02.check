-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),IntTimes(Sym(2),Sym(1)))
TP(Sym(4),IntTimes(Sym(1),Sym(3)))
TP(Sym(5),Singleton(Block(Sym(4))))
TP(Sym(6),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(5)))))
TP(Sym(8),ArrayIndex(Sym(6),Sym(7)))
TP(Sym(9),OrderingGT(Sym(8),Const(50)))
TP(Sym(10),BooleanNegate(Sym(9)))
TP(Sym(11),IntPlus(Sym(8),Const(2)))
TP(Sym(12),Singleton(Block(Sym(11))))
TP(Sym(13),EmptyArrayInLoop(Sym(7)))
TP(Sym(14),IfThenElse(Sym(10),Block(Sym(12)),Block(Sym(13))))
TP(Sym(15),SimpleLoop(Const(10),Sym(7),MultiArrayElem(Block(Sym(14)))))
TP(Sym(16),ArrayLength(Sym(15)))
TP(Sym(17),Reflect(Print(Sym(16)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(18),Reify(Sym(17),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17))))

-- before transformation
val x6 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x6(x1) = x4
}
var x15 = new ArrayBuilder[Int]
for (x7 <- 0 until 10) {
val x8 = x6.apply(x7)
val x9 = x8 > 50
val x10 = !x9
if (x10) {
val x11 = x8 + 2
x15 += x11
}
}
val x16 = x15.length
val x17 = println(x16)

-- vertical transformation

(VFT) No producers found for cons Sym(6)

(VFT) Not fused prod Sym(6) with cons Sym(15) because consumer loop might not iterate over full range of producer collection
(VFT) No producers found for cons Sym(15)

(VFT) all vertically fused: 

-- after vertical transformation
val x6 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x6(x1) = x4
}
var x15 = new ArrayBuilder[Int]
for (x7 <- 0 until 10) {
val x8 = x6.apply(x7)
val x9 = x8 > 50
val x10 = !x9
if (x10) {
val x11 = x8 + 2
x15 += x11
}
}
val x16 = x15.length
val x19 = println(x16)

-- horizontal transformation
(HFT) Recording Sym(6), no fusion
(HFT) Recording Sym(15), no fusion

(HFT) all horizontally fused: 

-- after horizontal transformation
val x6 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x6(x1) = x4
}
var x15 = new ArrayBuilder[Int]
for (x7 <- 0 until 10) {
val x8 = x6.apply(x7)
val x9 = x8 > 50
val x10 = !x9
if (x10) {
val x11 = x8 + 2
x15 += x11
}
}
val x16 = x15.length
val x21 = println(x16)

-- fusion
val x6 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x3 = x2 * x1
val x4 = x1 * x3
x6(x1) = x4
}
var x15 = new ArrayBuilder[Int]
for (x7 <- 0 until 10) {
val x8 = x6.apply(x7)
val x9 = x8 > 50
val x10 = !x9
if (x10) {
val x11 = x8 + 2
x15 += x11
}
}
val x16 = x15.length
val x21 = println(x16)
-- done
