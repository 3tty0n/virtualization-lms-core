-- full graph
TP(Sym(1),Reflect(NewVar(Const(0)),Summary(false,false,false,false,true,false,List(),List(),List(),List()),List()))
TP(Sym(3),Reflect(Print(Sym(2)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(4),IntPlus(Sym(2),Const(2)))
TP(Sym(5),Reify(Sym(4),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(3))))
TP(Sym(6),Reflect(SimpleLoop(Const(100),Sym(2),ArrayElem(Block(Sym(5)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(7),ArrayLength(Sym(6)))
TP(Sym(9),ArrayIndex(Sym(6),Sym(8)))
TP(Sym(10),Reflect(VarPlusEquals(Variable(Sym(1)),Sym(9)),Summary(false,false,false,false,false,false,List(Sym(1)),List(Sym(1)),List(Sym(1)),List(Sym(1))),List(Sym(1))))
TP(Sym(11),IntPlus(Sym(8),Const(4)))
TP(Sym(12),Reify(Sym(11),Summary(false,false,false,false,false,false,List(Sym(1)),List(Sym(1)),List(Sym(1)),List(Sym(1))),List(Sym(10))))
TP(Sym(13),Reflect(SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(12)))),Summary(false,false,false,false,false,false,List(Sym(1)),List(),List(Sym(1)),List()),List(Sym(1))))
TP(Sym(14),ArrayIndex(Sym(13),Const(0)))
TP(Sym(15),Reflect(Print(Sym(14)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(16),Reify(Sym(15),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(1), Sym(6), Sym(13), Sym(15))))

-- before transformation
var x1: Int = 0
var x6 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = println(x2)
val x4 = x2 + 2
x6(x2) = x4
}
val x7 = x6.length
var x13 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x6.apply(x8)
val x10 = x1 += x9
val x11 = x8 + 4
x13(x8) = x11
}
val x14 = x13.apply(0)
val x15 = println(x14)

-- vertical transformation

(VFT) No producers found for TP(Sym(6),Reflect(SimpleLoop(Const(100),Sym(2),ArrayElem(Block(Sym(5)))), ...)), changed to Sym(20) because of existing substitutions or to reflect effects
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(6))) with fixed length: Const(100)

(VFT) Sym(13) not fused with Sym(6) because not indep (effectful consumer cannot be fused with effectful producer).
(VFT) No producers found for TP(Sym(13),Reflect(SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(12)))), ...)), remapping to Sym(25) because of fixed shape

(VFT) all vertically fused: 

-- after vertical transformation
var x17: Int = 0
var x20 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x4 = x2 + 2
val x18 = println(x2)
x20(x2) = x4
}
var x25 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x21 = x20.apply(x2)
val x22 = x17 += x21
val x23 = x2 + 4
x25(x2) = x23
}
val x26 = x25.apply(0)
val x27 = println(x26)

-- horizontal transformation
(HFT) Recording Sym(20), no fusion
(HFT) - new loop symbol: Sym(20) -> Sym(32)
(HFT) The candidate Sym(25) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(2), loopSyms = List(Sym(20))) because the candidate set depends on Sym(20)
(HFT) Recording Sym(25), no fusion
(HFT) - new loop symbol: Sym(25) -> Sym(36)

(HFT) all horizontally fused: 

-- after horizontal transformation
var x29: Int = 0
var x32 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x4 = x2 + 2
val x30 = println(x2)
x32(x2) = x4
}
var x36 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x23 = x2 + 4
val x33 = x32.apply(x2)
val x34 = x29 += x33
x36(x2) = x23
}
val x37 = x36.apply(0)
val x38 = println(x37)

-- fusion
var x29: Int = 0
var x32 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x4 = x2 + 2
val x30 = println(x2)
x32(x2) = x4
}
var x36 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x23 = x2 + 4
val x33 = x32.apply(x2)
val x34 = x29 += x33
x36(x2) = x23
}
val x37 = x36.apply(0)
val x38 = println(x37)
-- done
