/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
var x3: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.PolarComplex] = manifest[scala.virtualization.lms.epfl.test9.PolarComplex]
var x4: Double = 3.0
val x1 = x0
var x5: Double = x1
var x8: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.PolarComplex] = manifest[scala.virtualization.lms.epfl.test9.PolarComplex]
var x9: Double = x1
var x10: Double = 2.0
val x12 = x0 > 0
val x25 = if (x12) {
val x13 = x3
x13
} else {
val x18 = x8
x18
}
val x28 = x25.asInstanceOf[scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.PolarComplex]]
var x30: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.PolarComplex] = x28
val x26 = if (x12) {
val x14 = x4
x14
} else {
val x19 = x9
x19
}
var x31: Double = x26
val x27 = if (x12) {
val x15 = x5
x15
} else {
val x20 = x10
x20
}
var x32: Double = x27
val x34 = x30
val x35 = x31
val x36 = x32
var x43: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.CartesianComplex] = manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
val x38 = java.lang.Math.cos(x36)
val x39 = x35*x38
var x44: Double = x39
val x40 = java.lang.Math.sin(x36)
val x41 = x35*x40
var x45: Double = x41
val x47 = x43
val x48 = x44
val x49 = x45
val x50 = Map("clzz"->x47,"re"->x48,"im"->x49) //MyClassTag(scala.virtualization.lms.epfl.test9.CartesianComplex)
val x51 = println(x50)
x51
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
Map(clzz -> scala.virtualization.lms.epfl.test9.CartesianComplex, re -> -2.9699774898013365, im -> 0.4233600241796016)
