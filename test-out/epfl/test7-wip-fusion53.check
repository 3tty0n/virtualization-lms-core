-- full graph
TP(Sym(1),Reflect(Print(Const(1)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(3),IntPlus(Sym(2),Const(2)))
TP(Sym(4),SingletonInLoop(Block(Sym(3)),Sym(2)))
TP(Sym(5),SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(4)))))
TP(Sym(6),Reflect(Print(Const(3)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(1))))
TP(Sym(7),ArrayLength(Sym(5)))
TP(Sym(9),ArrayIndex(Sym(5),Sym(8)))
TP(Sym(10),Reflect(Print(Sym(9)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(11),Reify(Const(4),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(10))))
TP(Sym(12),Reflect(SingletonInLoop(Block(Sym(11)),Sym(8)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(13),Reify(Sym(12),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(12))))
TP(Sym(14),Reflect(SimpleLoop(Sym(7),Sym(8),MultiArrayElem(Block(Sym(13)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(15),ArrayIndex(Sym(5),Const(0)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(14))))
TP(Sym(17),ArrayIndex(Sym(14),Const(5)))
TP(Sym(18),Reflect(Print(Sym(17)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(16))))
TP(Sym(19),Reify(Sym(18),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(1), Sym(6), Sym(14), Sym(16), Sym(18))))

-- before transformation
val x1 = println(1)
val x6 = println(3)
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 2
x5(x2) = x3
}
val x7 = x5.length
val x14 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x5.apply(x8)
val x10 = println(x9)
x14(x8) = 4
}
val x15 = x5.apply(0)
val x16 = println(x15)
val x17 = x14.apply(5)
val x18 = println(x17)

-- vertical transformation

(VFT) No producers found for cons Sym(5)
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(5))) with fixed length: Const(100)

(VFT) Fusing prod Sym(5) with cons Sym(14). Type: Mc_McForlike(Sym(8),Sym(2),Sym(7),Const(100),Single_MC(Sym(8),(Sym(5),Sym(8)),Sym(3),Sym(13),Sym(4),Sym(14)),Sym(13),Sym(4),Sym(5),Sym(14))
(VFT) Fused prod Sym(5) with cons Sym(14), fused sym: Sym(26)

(VFT) all vertically fused: List(Sym(26), Sym(5))

-- after vertical transformation
val x20 = println(1)
val x21 = println(3)
val x26 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 2
val x22 = println(x3)
x26(x2) = 4
}
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 2
x5(x2) = x3
}
val x15 = x5.apply(0)
val x27 = println(x15)
val x28 = x26.apply(5)
val x29 = println(x28)

-- horizontal transformation
(HFT) Recording Sym(26), no fusion
(HFT) - new loop symbol: Sym(26) -> Sym(37)
(HFT) Fusing Sym(5) with containing fusion set FusedLoopSet(shape = Const(100), indexSym = Sym(2), loopSyms = List(Sym(26), Sym(5)))
(HFT) - already using same index Sym(2)

(HFT) all horizontally fused: List(Sym(37), Sym(5))

-- after horizontal transformation
val x31 = println(1)
val x32 = println(3)
val x37 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 2
val x33 = println(x3)
x37(x2) = 4
}
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 2
x5(x2) = x3
}
val x15 = x5.apply(0)
val x38 = println(x15)
val x39 = x37.apply(5)
val x40 = println(x39)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(37)),List(Reflect(SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(36)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List(Sym(32)))),SimpleFatLoop(Const(100),Sym(2),List(MultiArrayElem(Block(Sym(36))))))
TTP(List(Sym(5)),List(SimpleLoop(Const(100),Sym(2),MultiArrayElem(Block(Sym(4))))),SimpleFatLoop(Const(100),Sym(2),List(MultiArrayElem(Block(Sym(4))))))

val x31 = println(1)
val x32 = println(3)
val x37 = new Array[Int](100)
val x5 = new Array[Int](100)
for (x2 <- 0 until 100) {
val x3 = x2 + 2
val x33 = println(x3)
x37(x2) = 4
x5(x2) = x3
}
val x15 = x5.apply(0)
val x38 = println(x15)
val x39 = x37.apply(5)
val x40 = println(x39)
-- done
