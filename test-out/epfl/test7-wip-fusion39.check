-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(5),IntPlus(Sym(4),Const(2)))
TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
TP(Sym(8),OrderingGT(Sym(7),Const(10)))
TP(Sym(9),IntPlus(Sym(7),Const(3)))
TP(Sym(10),SimpleLoop(Const(100),Sym(7),ArrayIfElem(Sym(8),Block(Sym(9)))))
TP(Sym(11),ArrayLength(Sym(6)))
TP(Sym(13),ArrayIndex(Sym(3),Sym(12)))
TP(Sym(14),ArrayIndex(Sym(6),Sym(12)))
TP(Sym(15),IntPlus(Sym(13),Sym(14)))
TP(Sym(16),SimpleLoop(Sym(11),Sym(12),ArrayElem(Block(Sym(15)))))
TP(Sym(18),ArrayIndex(Sym(10),Sym(17)))
TP(Sym(19),SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(18)))))
TP(Sym(20),ArrayIndex(Sym(10),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(22),ArrayIndex(Sym(16),Const(0)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(21))))
TP(Sym(24),ArrayIndex(Sym(19),Const(0)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(23))))
TP(Sym(26),Reify(Sym(25),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(21), Sym(23), Sym(25))))

-- before transformation
var x10 = new ArrayBuilder[Int]
for (x7 <- 0 until 100) {
val x8 = x7 > 10
val x9 = x7 + 3
if (x8) x10 += x9
}
val x20 = x10.apply(0)
val x21 = println(x20)
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
x6(x4) = x5
}
val x11 = x6.length
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
var x16 = new Array[Int](x11)
for (x12 <- 0 until x11) {
val x13 = x3.apply(x12)
val x14 = x6.apply(x12)
val x15 = x13 + x14
x16(x12) = x15
}
val x22 = x16.apply(0)
val x23 = println(x22)
var x19 = new Array[Int](100)
for (x17 <- 0 until 100) {
val x18 = x10.apply(x17)
x19(x17) = x18
}
val x24 = x19.apply(0)
val x25 = println(x24)

-- vertical transformation

(VFT) No producers found for TP(Sym(10),SimpleLoop(Const(100),Sym(7),ArrayIfElem(Sym(8),Block(Sym(9)))))

(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
(VFT) Replaced TP(Sym(11),ArrayLength(Sym(6))) with fixed length: Const(100)

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))), remapping to Sym(29) because of fixed shape

(VFT) Fusing consumer TP(Sym(16),SimpleLoop(Sym(11),Sym(12),ArrayElem(Block(Sym(15))))) with real producer: Sym(6) and then with reconstructed producers: List(Sym(29) (was Sym(3)))
(VFT) General fusion: remap index to Sym(4), SimpleIndex to Sym(5).
(VFT) SimpleCollect+Any fusion: nothing more to do for first producer, fuse with other producers: List(Sym(29))
(VFT) Multiple fusion: remap SimpleIndex(Sym(29)) to Sym(28).

(VFT) Finished fusion of prods: List(Sym(6), Sym(29)) and cons: Sym(16), the resulting fused loop is Sym(31)

(VFT) Sym(19) not fused with Sym(10) because not same range (cConsts: List(Const(100)), pConsts: List(), cShapeSyms: List(), pShapeSyms: List()).
(VFT) No producers found for TP(Sym(19),SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(18))))), remapping to Sym(35) because of fixed shape

(VFT) all vertically fused: List(Sym(29), Sym(31), Sym(6))

-- after vertical transformation
var x10 = new ArrayBuilder[Int]
for (x7 <- 0 until 100) {
val x8 = x7 > 10
val x9 = x7 + 3
if (x8) x10 += x9
}
val x20 = x10.apply(0)
val x27 = println(x20)
var x31 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
val x28 = x4 + 1
val x30 = x28 + x5
x31(x4) = x30
}
val x32 = x31.apply(0)
val x33 = println(x32)
var x35 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x34 = x10.apply(x4)
x35(x4) = x34
}
val x36 = x35.apply(0)
val x37 = println(x36)

-- horizontal transformation
(HFT) Recording Sym(10), no fusion
(HFT) Fusing Sym(31) with fusion set FusedSet(shape = Const(100), indexSym = Sym(7), loopSyms = List(Sym(10)))
(HFT) - remapping index: Sym(4) -> Sym(7)
(HFT) - new loop symbol: Sym(31) -> Sym(43)
(HFT) The candidate Sym(35) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(7), loopSyms = List(Sym(10), Sym(29), Sym(31), Sym(6))) because the candidate set depends on Sym(10)
(HFT) Recording Sym(35), no fusion

(HFT) all horizontally fused: List(Sym(10), Sym(43))

-- after horizontal transformation
var x10 = new ArrayBuilder[Int]
for (x7 <- 0 until 100) {
val x8 = x7 > 10
val x9 = x7 + 3
if (x8) x10 += x9
}
val x20 = x10.apply(0)
val x39 = println(x20)
var x43 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x40 = x7 + 2
val x41 = x7 + 1
val x42 = x41 + x40
x43(x7) = x42
}
val x44 = x43.apply(0)
val x45 = println(x44)
var x35 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x34 = x10.apply(x4)
x35(x4) = x34
}
val x36 = x35.apply(0)
val x46 = println(x36)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(10)),List(SimpleLoop(Const(100),Sym(7),ArrayIfElem(Sym(8),Block(Sym(9))))),SimpleFatLoop(Const(100),Sym(7),List(ArrayIfElem(Sym(8),Block(Sym(9))))))
TTP(List(Sym(43)),List(SimpleLoop(Const(100),Sym(7),ArrayElem(Block(Sym(42))))),SimpleFatLoop(Const(100),Sym(7),List(ArrayElem(Block(Sym(42))))))

var x10 = new ArrayBuilder[Int]
var x43 = new Array[Int](100)
for (x7 <- 0 until 100) {
val x8 = x7 > 10
val x9 = x7 + 3
val x40 = x7 + 2
val x41 = x7 + 1
val x42 = x41 + x40
if (x8) x10 += x9
x43(x7) = x42
}
val x20 = x10.apply(0)
val x39 = println(x20)
val x44 = x43.apply(0)
val x45 = println(x44)
var x35 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x34 = x10.apply(x4)
x35(x4) = x34
}
val x36 = x35.apply(0)
val x46 = println(x36)
-- done
