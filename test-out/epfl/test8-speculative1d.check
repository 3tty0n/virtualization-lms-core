-- fatten effectful if/then/else TP(Sym(15),Reflect(IfThenElse(Sym(3),Block(Sym(10)),Block(Sym(14))),Summary(true,false,false,false,false,List(),List(),List(),List()),List()))
-- fatten effectful if/then/else TP(Sym(11),Reflect(IfThenElse(Sym(3),Block(Sym(9)),Block(Sym(10))),Summary(false,false,false,false,false,List(Sym(1)),List(),List(Sym(1)),List()),List(Sym(1))))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
var x1: Int = 7
val x3 = 7 > x0
// TODO: use vars instead of tuples to return multiple values
val (x15,x11) = if (x3) {
x1 = 5
((),())
} else {
val x7 = println("no")
((),())
}
val x17 = x1
val x18 = println(x17)
x18
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
