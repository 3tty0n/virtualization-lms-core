----- Sym(25) / Set((re,Sym(4)), (im,Sym(26)))
TTP(List(Sym(4)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(1))))))
TP(Sym(13),Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()))
TP(Sym(2),Minus(Const(0.0),Sym(1)))
TTP(List(Sym(5)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(2))))))
TP(Sym(14),Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()))
TP(Sym(16),OrderingGT(Sym(0),Const(7)))
TP(Sym(19),ArrayIndex(Sym(5),Sym(17)))
TP(Sym(21),Minus(Const(0.0),Sym(19)))
TTP(List(Sym(23)),List(SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21))))),SimpleFatLoop(Const(100),Sym(17),List(ArrayElem(Block(Sym(21))))))
TP(Sym(27),SimpleStruct(ArraySoaTag(ClassTag(Complex),Const(100)),Map(re -> Sym(4), im -> Sym(26))))
TP(Sym(28),Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(29),Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))))
TTP(List(Sym(26)),List(Phi(Sym(16),Block(Const(())),Block(Sym(23)),Block(Const(())),Block(Sym(5)))),SimpleFatIfThenElse(Sym(16),List(Block(Sym(23))),List(Block(Sym(5)))))
wtableneg: List()
partitions: List(TTP(List(Sym(4), Sym(5)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))), SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(1))), ArrayElem(Block(Sym(2)))))))
considering TP(Sym(19),ArrayIndex(Sym(5),Sym(17)))
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Block(Sym(1))))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Block(Sym(1)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Block(Sym(2))))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Block(Sym(2)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Block(Sym(21))))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21)))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Block(Sym(21)))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5)))
skipping mirror operation Sym(26)=Phi(Sym(16),Block(Const(())),Block(Sym(23)),Block(Const(())),Block(Sym(5))) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(ArraySoaTag(ClassTag(Complex),Const(100)),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Block(Sym(1))))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Block(Sym(1)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Block(Sym(2))))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Block(Sym(2)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Block(Sym(21))))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21)))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Block(Sym(21)))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5)))
skipping mirror operation Sym(26)=Phi(Sym(16),Block(Const(())),Block(Sym(23)),Block(Const(())),Block(Sym(5))) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(ArraySoaTag(ClassTag(Complex),Const(100)),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Block(Sym(1))))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Block(Sym(1)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Block(Sym(2))))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Block(Sym(2)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Block(Sym(21))))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21)))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Block(Sym(21)))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5)))
skipping mirror operation Sym(26)=Phi(Sym(16),Block(Const(())),Block(Sym(23)),Block(Const(())),Block(Sym(5))) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(ArraySoaTag(ClassTag(Complex),Const(100)),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Block(Sym(1))))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Block(Sym(1)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(13)=Reflect(NewVar(Sym(4)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(4) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(2)=Minus(Const(0.0),Sym(1)) syms Sym(1) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Block(Sym(2))))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Block(Sym(2)))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(14)=Reflect(NewVar(Sym(5)),Summary(false,false,false,false,true,List(),List(),List(),List()),List()) syms Sym(5) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(16)=OrderingGT(Sym(0),Const(7)) syms Sym(0) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(19)=ArrayIndex(Sym(5),Sym(17)) syms Sym(5),Sym(17) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(21)=Minus(Const(0.0),Sym(19)) syms Sym(19) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(23)), List(ArrayElem(Block(Sym(21))))
skipping mirror operation Sym(23)=SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21)))) syms Sym(21) subst Sym(1) -> Sym(1)
came up with: List(Sym(23)), List(ArrayElem(Block(Sym(21)))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat if/then/else: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5)))
skipping mirror operation Sym(26)=Phi(Sym(16),Block(Const(())),Block(Sym(23)),Block(Const(())),Block(Sym(5))) syms Sym(16),Sym(23),Sym(5) subst Sym(1) -> Sym(1)
came up with: List(Sym(26)), if Sym(16) then List(Block(Sym(23))) else List(Block(Sym(5))) with subst Sym(1) -> Sym(1)
skipping mirror operation Sym(27)=SimpleStruct(ArraySoaTag(ClassTag(Complex),Const(100)),Map(re -> Sym(4), im -> Sym(26))) syms Sym(4),Sym(26) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(28)=Reflect(Print(Sym(27)),Summary(true,true,false,false,false,List(),List(),List(),List()),List()) syms Sym(27) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(29)=Reify(Sym(28),Summary(true,true,false,false,false,List(),List(),List(),List()),List(Sym(13), Sym(14), Sym(28))) syms Sym(28),Sym(13),Sym(14),Sym(28) subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4)), List(ArrayElem(Block(Sym(1))))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))) syms Sym(1) subst Sym(1) -> Sym(1)
came up with: List(Sym(4)), List(ArrayElem(Block(Sym(1)))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(5)), List(ArrayElem(Block(Sym(2))))
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(5)), List(ArrayElem(Block(Sym(2)))) with subst Sym(1) -> Sym(1)
need to transform rhs of fat loop: List(Sym(4), Sym(5)), List(ArrayElem(Block(Sym(1))), ArrayElem(Block(Sym(2))))
skipping mirror operation Sym(4)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))) syms Sym(1) subst Sym(1) -> Sym(1)
skipping mirror operation Sym(5)=SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))) syms Sym(2) subst Sym(1) -> Sym(1)
came up with: List(Sym(4), Sym(5)), List(ArrayElem(Block(Sym(1))), ArrayElem(Block(Sym(2)))) with subst Sym(1) -> Sym(1)
try once more ...
wtableneg: List()
partitions: List(TTP(List(Sym(4), Sym(5)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(1)))), SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(1))), ArrayElem(Block(Sym(2)))))))
no changes, we're done
TP(Sym(2),Minus(Const(0.0),Sym(1)))
TP(Sym(19),ArrayIndex(Sym(5),Sym(17)))
TP(Sym(21),Minus(Const(0.0),Sym(19)))
TTP(List(Sym(23)),List(SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21))))),SimpleFatLoop(Const(100),Sym(17),List(ArrayElem(Block(Sym(21))))))
wtableneg: List()
partitions: List(TTP(List(Sym(23)),List(SimpleLoop(Const(100),Sym(17),ArrayElem(Block(Sym(21))))),SimpleFatLoop(Const(100),Sym(17),List(ArrayElem(Block(Sym(21)))))))
no changes, we're done
TP(Sym(19),ArrayIndex(Sym(5),Sym(17)))
TP(Sym(21),Minus(Const(0.0),Sym(19)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Any)) {
def apply(x0:Int): Any = {
var x4 = new Array[Int](100)
var x5 = new Array[Double](100)
for (x1 <- 0 until 100) {
val x2 = 0.0-x1
x4(x1) = x1
x5(x1) = x2
}
var x13: Array[Int] = x4
var x14: Array[Double] = x5
val x16 = x0 > 7
val x26 = if (x16) {
var x23 = new Array[Double](100)
for (x17 <- 0 until 100) {
val x19 = x5.apply(x17)
val x21 = 0.0-x19
x23(x17) = x21
}
x23
} else {
x5
}
val x27 = Map("re"->x4,"im"->x26) //ArraySoaTag(ClassTag(Complex),Const(100))
val x28 = println(x27)
x28
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
