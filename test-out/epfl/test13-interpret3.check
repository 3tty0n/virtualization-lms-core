call with arg Map(n -> 256, a -> SomethingElse)
(re) compiling
free vars: List(Sym(2))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX) sym Sym(3)
-- Sym(2)
free vars: List(Sym(2))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX) sym Sym(7)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any HashMapApply(Sym(2),Const(n))
free vars: List(Sym(2))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX) sym Sym(12)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any StaticData(-1)
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(29),Summary(true,true,false,false,false,List(),List(),List(Sym(3)),List()),List(Sym(29)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(37),Summary(true,true,false,false,false,List(),List(),List(Sym(31)),List(Sym(31))),List(Sym(32), Sym(36), Sym(37)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(39),Summary(true,true,false,false,false,List(),List(),List(Sym(3), Sym(31)),List()),List(Sym(39)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(45),Summary(true,true,false,false,false,List(),List(),List(Sym(31)),List(Sym(31))),List(Sym(41), Sym(44), Sym(45)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(47),Summary(true,true,false,false,false,List(),List(),List(Sym(3), Sym(31)),List()),List(Sym(47)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(53),Summary(true,true,false,false,false,List(),List(),List(Sym(31)),List(Sym(31))),List(Sym(49), Sym(52), Sym(53)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(55),Summary(true,true,false,false,false,List(),List(),List(Sym(3), Sym(31)),List()),List(Sym(1), Sym(2), Sym(55)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class staged$0(px3:scala.virtualization.lms.epfl.test13.RCell[Object],px5:Object,px7:scala.virtualization.lms.epfl.test13.RCell[Object],px9:Object,px12:scala.virtualization.lms.epfl.test13.RCell[Object],px14:Object,px16:Any,px21:Object,px31:scala.virtualization.lms.epfl.test13.RCell[scala.Function1[scala.collection.mutable.HashMap[java.lang.String, Any], Any]],px35:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]],px43:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]],px51:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]]) extends ((scala.collection.mutable.HashMap[java.lang.String, Any])=>(Any)) {
def apply(x0:scala.collection.mutable.HashMap[java.lang.String, Any]): Any = {
var x1: scala.collection.mutable.HashMap[java.lang.String, Any] = x0
val x2 = x1
val x3 = px3 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX)
val x4 = x3.value
val x5 = px5 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN$$anon$23@XXX
val x6 = x4 == x5
val x55 = if (x6) {
val x7 = px7 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX)
val x8 = x7.value
val x9 = px9 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN$$anon$27@XXX
val x10 = x8 == x9
val x47 = if (x10) {
val x12 = px12 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX)
val x13 = x12.value
val x14 = px14 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN$$anon$29@XXX
val x15 = x13 == x14
val x39 = if (x15) {
val x11 = x2("n")
val x17 = x11.isInstanceOf[Int]
val x16 = px16 // static data: -1
val x18 = x16.isInstanceOf[Int]
val x19 = x17 && x18
val x29 = if (x19) {
val x20 = println("spec-add-int: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX")
val x21 = px21 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN$$anon$24@XXX
val x22 = x3.set(x21)
val x23 = x11.asInstanceOf[Int]
val x24 = x16.asInstanceOf[Int]
val x25 = x23 + x24
x25
} else {
val x27 = println("GENERIC")
x27
}
x29
} else {
val x31 = px31 // static data: RCell(code)
val x32 = x31.set(null)
val x35 = px35 // static data: <function1>
val x36 = x35.apply(List(x13, x2))// compile dynamic: fv = List(Sym(13), Sym(2))
val x37 = x36.apply(())
x37
}
x39
} else {
val x31 = px31 // static data: RCell(code)
val x41 = x31.set(null)
val x43 = px43 // static data: <function1>
val x44 = x43.apply(List(x8, x2))// compile dynamic: fv = List(Sym(8), Sym(2))
val x45 = x44.apply(())
x45
}
x47
} else {
val x31 = px31 // static data: RCell(code)
val x49 = x31.set(null)
val x51 = px51 // static data: <function1>
val x52 = x51.apply(List(x4, x2))// compile dynamic: fv = List(Sym(4), Sym(2))
val x53 = x52.apply(())
x53
}
x55
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
spec-add-int: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$AddN@XXX
255
call with arg Map(n -> 256, a -> SomethingElse)
-- Sym(2)
free vars: List(Sym(2))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX) sym Sym(6)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any HashMapApply(Sym(2),Const(n))
free vars: List(Sym(2))
read value RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX) sym Sym(12)
-- Sym(2)
warning: possible missing mtype call - toAtom with Def of type Any StaticData(-1)
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(25),Summary(true,true,false,false,false,List(),List(),List(Sym(19)),List(Sym(19))),List(Sym(20), Sym(24), Sym(25)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(27),Summary(true,false,false,false,false,List(),List(),List(Sym(19)),List()),List(Sym(27)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(33),Summary(true,true,false,false,false,List(),List(),List(Sym(19)),List(Sym(19))),List(Sym(29), Sym(32), Sym(33)))
warning: possible missing mtype call - toAtom with Def of type Any Reify(Sym(35),Summary(true,false,false,false,false,List(),List(),List(Sym(19)),List()),List(Sym(35)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class staged$1(px6:scala.virtualization.lms.epfl.test13.RCell[Object],px8:Object,px12:scala.virtualization.lms.epfl.test13.RCell[Object],px14:Object,px2:scala.collection.mutable.HashMap[java.lang.String, Any],px16:Any,px19:scala.virtualization.lms.epfl.test13.RCell[scala.Function1[scala.collection.mutable.HashMap[java.lang.String, Any], Any]],px23:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]],px31:scala.Function1[scala.collection.immutable.List[Any], scala.Function1[Unit, Any]]) extends ((Unit)=>(Any)) {
def apply(x5:Unit): Any = {
val x6 = px6 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN@XXX)
val x7 = x6.value
val x8 = px8 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$LookupN$$anon$27@XXX
val x9 = x7 == x8
val x35 = if (x9) {
val x12 = px12 // static data: RCell(dyn - FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN@XXX)
val x13 = x12.value
val x14 = px14 // static data: FUN:scala.virtualization.lms.epfl.test13.TestInterpret$InterpretStagedReopt$ConstN$$anon$29@XXX
val x15 = x13 == x14
val x27 = if (x15) {
val x2 = px2 // static data: Map(n -> 256, a -> SomethingElse)
val x10 = x2("n")
val x11 = x10.asInstanceOf[Int]
val x16 = px16 // static data: -1
val x17 = x16.asInstanceOf[Int]
val x18 = x11 + x17
x18
} else {
val x19 = px19 // static data: RCell(code)
val x20 = x19.set(null)
val x2 = px2 // static data: Map(n -> 256, a -> SomethingElse)
val x23 = px23 // static data: <function1>
val x24 = x23.apply(List(x13, x2))// compile dynamic: fv = List(Sym(13), Sym(2))
val x25 = x24.apply(())
x25
}
x27
} else {
val x19 = px19 // static data: RCell(code)
val x29 = x19.set(null)
val x2 = px2 // static data: Map(n -> 256, a -> SomethingElse)
val x31 = px31 // static data: <function1>
val x32 = x31.apply(List(x7, x2))// compile dynamic: fv = List(Sym(7), Sym(2))
val x33 = x32.apply(())
x33
}
x35
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

compilation: ok
255
