-- full graph
TP(Sym(2),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(1)))))
TP(Sym(4),IntTimes(Sym(3),Const(2)))
TP(Sym(5),SimpleLoop(Const(20),Sym(3),ArrayElem(Block(Sym(4)))))
TP(Sym(6),ArrayLength(Sym(5)))
TP(Sym(8),ArrayIndex(Sym(5),Sym(7)))
TP(Sym(9),ArrayIndex(Sym(2),Const(0)))
TP(Sym(10),IntPlus(Sym(8),Sym(9)))
TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayLength(Sym(2)))
TP(Sym(14),ArrayIndex(Sym(2),Sym(13)))
TP(Sym(15),ArrayIndex(Sym(5),Const(0)))
TP(Sym(16),IntPlus(Sym(14),Sym(15)))
TP(Sym(17),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(16)))))
TP(Sym(18),ArrayIndex(Sym(11),Const(0)))
TP(Sym(19),Reflect(Print(Sym(18)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(20),ArrayIndex(Sym(17),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(19))))
TP(Sym(22),Reify(Sym(21),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(19), Sym(21))))

-- before transformation
var x5 = new Array[Int](20)
for (x3 <- 0 until 20) {
val x4 = x3 * 2
x5(x3) = x4
}
val x6 = x5.length
var x2 = new Array[Int](30)
for (x1 <- 0 until 30) {
x2(x1) = x1
}
val x9 = x2.apply(0)
var x11 = new Array[Int](x6)
for (x7 <- 0 until x6) {
val x8 = x5.apply(x7)
val x10 = x8 + x9
x11(x7) = x10
}
val x18 = x11.apply(0)
val x19 = println(x18)
val x12 = x2.length
val x15 = x5.apply(0)
var x17 = new Array[Int](x12)
for (x13 <- 0 until x12) {
val x14 = x2.apply(x13)
val x16 = x14 + x15
x17(x13) = x16
}
val x20 = x17.apply(0)
val x21 = println(x20)

-- vertical transformation

(VFT) No producers found for TP(Sym(5),SimpleLoop(Const(20),Sym(3),ArrayElem(Block(Sym(4)))))

(VFT) No producers found for TP(Sym(2),SimpleLoop(Const(30),Sym(1),ArrayElem(Block(Sym(1)))))

(VFT) Fusing consumer TP(Sym(11),SimpleLoop(Sym(6),Sym(7),ArrayElem(Block(Sym(10))))) with real producer: Sym(5)
(VFT) General fusion: remap index to Sym(3), SimpleIndex to Sym(4).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(5) and cons: Sym(11), the resulting fused loop is Sym(24)

(VFT) Sym(17) not fused with Sym(2) because not indep (consumer depends on Sym(2)).
(VFT) No producers found for TP(Sym(17),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(16))))), remapping to Sym(29) because of fixed shape

(VFT) all vertically fused: List(Sym(5), Sym(24))

-- after vertical transformation
var x2 = new Array[Int](30)
for (x1 <- 0 until 30) {
x2(x1) = x1
}
val x9 = x2.apply(0)
var x24 = new Array[Int](20)
for (x3 <- 0 until 20) {
val x4 = x3 * 2
val x23 = x4 + x9
x24(x3) = x23
}
val x25 = x24.apply(0)
val x26 = println(x25)
var x5 = new Array[Int](20)
for (x3 <- 0 until 20) {
val x4 = x3 * 2
x5(x3) = x4
}
val x15 = x5.apply(0)
var x29 = new Array[Int](30)
for (x1 <- 0 until 30) {
val x27 = x2.apply(x1)
val x28 = x27 + x15
x29(x1) = x28
}
val x30 = x29.apply(0)
val x31 = println(x30)

-- horizontal transformation
(HFT) Recording Sym(2), no fusion
(HFT) Recording Sym(24), no fusion
(HFT) Fusing Sym(5) with containing fusion set FusedSet(shape = Const(20), indexSym = Sym(3), loopSyms = List(Sym(5), Sym(24)))
(HFT) - already using same index Sym(3)
(HFT) The candidate Sym(29) cannot be fused with the existing FusedSet(shape = Const(30), indexSym = Sym(1), loopSyms = List(Sym(2))) because the candidate set depends on Sym(2)
(HFT) Recording Sym(29), no fusion

(HFT) all horizontally fused: List(Sym(24), Sym(5))

-- after horizontal transformation
var x2 = new Array[Int](30)
for (x1 <- 0 until 30) {
x2(x1) = x1
}
val x9 = x2.apply(0)
var x24 = new Array[Int](20)
for (x3 <- 0 until 20) {
val x4 = x3 * 2
val x23 = x4 + x9
x24(x3) = x23
}
val x25 = x24.apply(0)
val x26 = println(x25)
var x5 = new Array[Int](20)
for (x3 <- 0 until 20) {
val x4 = x3 * 2
x5(x3) = x4
}
val x15 = x5.apply(0)
var x29 = new Array[Int](30)
for (x1 <- 0 until 30) {
val x27 = x2.apply(x1)
val x28 = x27 + x15
x29(x1) = x28
}
val x30 = x29.apply(0)
val x31 = println(x30)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(24)),List(SimpleLoop(Const(20),Sym(3),ArrayElem(Block(Sym(23))))),SimpleFatLoop(Const(20),Sym(3),List(ArrayElem(Block(Sym(23))))))
TTP(List(Sym(5)),List(SimpleLoop(Const(20),Sym(3),ArrayElem(Block(Sym(4))))),SimpleFatLoop(Const(20),Sym(3),List(ArrayElem(Block(Sym(4))))))

var x2 = new Array[Int](30)
for (x1 <- 0 until 30) {
x2(x1) = x1
}
val x9 = x2.apply(0)
var x24 = new Array[Int](20)
var x5 = new Array[Int](20)
for (x3 <- 0 until 20) {
val x4 = x3 * 2
val x23 = x4 + x9
x24(x3) = x23
x5(x3) = x4
}
val x25 = x24.apply(0)
val x26 = println(x25)
val x15 = x5.apply(0)
var x29 = new Array[Int](30)
for (x1 <- 0 until 30) {
val x27 = x2.apply(x1)
val x28 = x27 + x15
x29(x1) = x28
}
val x30 = x29.apply(0)
val x31 = println(x30)
-- done
