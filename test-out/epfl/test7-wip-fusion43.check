-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(5),IntPlus(Sym(4),Const(2)))
TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
TP(Sym(7),ArrayLength(Sym(6)))
TP(Sym(9),ArrayIndex(Sym(6),Sym(8)))
TP(Sym(10),IntPlus(Sym(9),Const(3)))
TP(Sym(11),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(10)))))
TP(Sym(13),ArrayIndex(Sym(3),Sym(12)))
TP(Sym(14),ArrayIndex(Sym(11),Sym(12)))
TP(Sym(15),IntPlus(Sym(13),Sym(14)))
TP(Sym(16),SimpleLoop(Const(100),Sym(12),ArrayElem(Block(Sym(15)))))
TP(Sym(18),ArrayIndex(Sym(6),Sym(17)))
TP(Sym(19),IntPlus(Sym(18),Const(4)))
TP(Sym(20),ArrayIndex(Sym(3),Const(0)))
TP(Sym(21),IntPlus(Sym(19),Sym(20)))
TP(Sym(22),SimpleLoop(Sym(7),Sym(17),ArrayElem(Block(Sym(21)))))
TP(Sym(23),ArrayIndex(Sym(16),Const(0)))
TP(Sym(24),Reflect(Print(Sym(23)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(25),ArrayIndex(Sym(22),Const(0)))
TP(Sym(26),Reflect(Print(Sym(25)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(24))))
TP(Sym(27),Reify(Sym(26),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(24), Sym(26))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
x6(x4) = x5
}
val x7 = x6.length
var x11 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x6.apply(x8)
val x10 = x9 + 3
x11(x8) = x10
}
var x16 = new Array[Int](100)
for (x12 <- 0 until 100) {
val x13 = x3.apply(x12)
val x14 = x11.apply(x12)
val x15 = x13 + x14
x16(x12) = x15
}
val x23 = x16.apply(0)
val x24 = println(x23)
val x20 = x3.apply(0)
var x22 = new Array[Int](x7)
for (x17 <- 0 until x7) {
val x18 = x6.apply(x17)
val x19 = x18 + 4
val x21 = x19 + x20
x22(x17) = x21
}
val x25 = x22.apply(0)
val x26 = println(x25)

-- vertical transformation

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))

(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5))))), remapping to Sym(29) because of fixed shape
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(6))) with fixed length: Const(100)

(VFT) Fusing consumer TP(Sym(11),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(10))))) with real producer: Sym(29) (was Sym(6))
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(28).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(29) and cons: Sym(11), the resulting fused loop is Sym(31)

(VFT) Fusing consumer TP(Sym(16),SimpleLoop(Const(100),Sym(12),ArrayElem(Block(Sym(15))))) with reconstructed producer: Sym(3) and then with: List(Sym(31) (was Sym(11)))
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) SimpleCollect+Any fusion: nothing more to do for first producer, fuse with other producers: List(Sym(31))
(VFT) Multiple fusion: remap SimpleIndex(Sym(31)) to Sym(30).

(VFT) Finished fusion of prods: List(Sym(3), Sym(31)) and cons: Sym(16), the resulting fused loop is Sym(33)

(VFT) Sym(22) not fused with Sym(6) because not indep (consumer depends on Sym(29)).
(VFT) No producers found for TP(Sym(22),SimpleLoop(Sym(7),Sym(17),ArrayElem(Block(Sym(21))))), remapping to Sym(39) because of fixed shape

(VFT) all vertically fused: List(Sym(3), Sym(29), Sym(31), Sym(33))

-- after vertical transformation
var x33 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x1 + 2
val x30 = x28 + 3
val x32 = x2 + x30
x33(x1) = x32
}
val x34 = x33.apply(0)
val x35 = println(x34)
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x20 = x3.apply(0)
var x29 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x28 = x1 + 2
x29(x1) = x28
}
var x39 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x36 = x29.apply(x1)
val x37 = x36 + 4
val x38 = x37 + x20
x39(x1) = x38
}
val x40 = x39.apply(0)
val x41 = println(x40)

-- horizontal transformation
(HFT) Recording Sym(33), no fusion
(HFT) Fusing Sym(3) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(29), Sym(31), Sym(33)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(29) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(29), Sym(31), Sym(33)))
(HFT) - already using same index Sym(1)
(HFT) The candidate Sym(39) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(29), Sym(31), Sym(33))) because the candidate set depends on Sym(29)
(HFT) Recording Sym(39), no fusion

(HFT) all horizontally fused: List(Sym(33), Sym(3), Sym(29))

-- after horizontal transformation
var x33 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x1 + 2
val x30 = x28 + 3
val x32 = x2 + x30
x33(x1) = x32
}
val x34 = x33.apply(0)
val x35 = println(x34)
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x20 = x3.apply(0)
var x29 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x28 = x1 + 2
x29(x1) = x28
}
var x39 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x36 = x29.apply(x1)
val x37 = x36 + 4
val x38 = x37 + x20
x39(x1) = x38
}
val x40 = x39.apply(0)
val x41 = println(x40)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(33)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(32))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(32))))))
TTP(List(Sym(3)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(2))))))
TTP(List(Sym(29)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(28))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(28))))))

var x33 = new Array[Int](100)
var x3 = new Array[Int](100)
var x29 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x1 + 2
val x30 = x28 + 3
val x32 = x2 + x30
x33(x1) = x32
x3(x1) = x2
x29(x1) = x28
}
val x34 = x33.apply(0)
val x35 = println(x34)
val x20 = x3.apply(0)
var x39 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x36 = x29.apply(x1)
val x37 = x36 + 4
val x38 = x37 + x20
x39(x1) = x38
}
val x40 = x39.apply(0)
val x41 = println(x40)
-- done
