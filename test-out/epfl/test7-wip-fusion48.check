-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(5),IntPlus(Sym(4),Const(2)))
TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
TP(Sym(7),ArrayLength(Sym(6)))
TP(Sym(9),ArrayIndex(Sym(6),Sym(8)))
TP(Sym(10),IntPlus(Sym(9),Const(3)))
TP(Sym(11),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(10)))))
TP(Sym(12),ArrayLength(Sym(3)))
TP(Sym(14),ArrayIndex(Sym(3),Sym(13)))
TP(Sym(15),ArrayIndex(Sym(6),Sym(13)))
TP(Sym(16),IntPlus(Sym(14),Sym(15)))
TP(Sym(17),ArrayIndex(Sym(6),Const(0)))
TP(Sym(18),IntPlus(Sym(16),Sym(17)))
TP(Sym(19),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(18)))))
TP(Sym(20),ArrayIndex(Sym(11),Const(0)))
TP(Sym(21),Reflect(Print(Sym(20)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(22),ArrayIndex(Sym(19),Const(0)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(21))))
TP(Sym(24),Reify(Sym(23),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(21), Sym(23))))

-- before transformation
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
x6(x4) = x5
}
val x7 = x6.length
var x11 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x6.apply(x8)
val x10 = x9 + 3
x11(x8) = x10
}
val x20 = x11.apply(0)
val x21 = println(x20)
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x12 = x3.length
val x17 = x6.apply(0)
var x19 = new Array[Int](x12)
for (x13 <- 0 until x12) {
val x14 = x3.apply(x13)
val x15 = x6.apply(x13)
val x16 = x14 + x15
val x18 = x16 + x17
x19(x13) = x18
}
val x22 = x19.apply(0)
val x23 = println(x22)

-- vertical transformation

(VFT) No producers found for TP(Sym(6),SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5)))))
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(6))) with fixed length: Const(100)

(VFT) Fusing consumer TP(Sym(11),SimpleLoop(Sym(7),Sym(8),ArrayElem(Block(Sym(10))))) with real producer: Sym(6)
(VFT) General fusion: remap index to Sym(4), SimpleIndex to Sym(5).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(6) and cons: Sym(11), the resulting fused loop is Sym(26)

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))), remapping to Sym(30) because of fixed shape
(VFT) Replaced TP(Sym(12),ArrayLength(Sym(3))) with fixed length: Const(100)

(VFT) Sym(19) not fused with Sym(6) because not indep (consumer depends on Sym(26)).
(VFT) Fusing consumer TP(Sym(19),SimpleLoop(Sym(12),Sym(13),ArrayElem(Block(Sym(18))))) with real producer: Sym(30) (was Sym(3))
(VFT) General fusion: remap index to Sym(4), SimpleIndex to Sym(29).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(30) and cons: Sym(19), the resulting fused loop is Sym(34)

(VFT) all vertically fused: List(Sym(30), Sym(34))
List(Sym(26), Sym(6))

-- after vertical transformation
var x26 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
val x25 = x5 + 3
x26(x4) = x25
}
val x27 = x26.apply(0)
val x28 = println(x27)
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
x6(x4) = x5
}
val x17 = x6.apply(0)
var x34 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x29 = x4 + 1
val x31 = x6.apply(x4)
val x32 = x29 + x31
val x33 = x32 + x17
x34(x4) = x33
}
val x35 = x34.apply(0)
val x36 = println(x35)

-- horizontal transformation
(HFT) Recording Sym(26), no fusion
(HFT) Fusing Sym(6) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(4), loopSyms = List(Sym(26), Sym(6)))
(HFT) - already using same index Sym(4)
(HFT) The candidate Sym(34) and its set (List(Sym(30), Sym(34))) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(4), loopSyms = List(Sym(26), Sym(6))) because the candidate set depends on Sym(6)
(HFT) Recording Sym(34), no fusion

(HFT) all horizontally fused: List(Sym(26), Sym(6))

-- after horizontal transformation
var x26 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
val x25 = x5 + 3
x26(x4) = x25
}
val x27 = x26.apply(0)
val x38 = println(x27)
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
x6(x4) = x5
}
val x17 = x6.apply(0)
var x34 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x29 = x4 + 1
val x31 = x6.apply(x4)
val x32 = x29 + x31
val x33 = x32 + x17
x34(x4) = x33
}
val x35 = x34.apply(0)
val x39 = println(x35)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(26)),List(SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(25))))),SimpleFatLoop(Const(100),Sym(4),List(ArrayElem(Block(Sym(25))))))
TTP(List(Sym(6)),List(SimpleLoop(Const(100),Sym(4),ArrayElem(Block(Sym(5))))),SimpleFatLoop(Const(100),Sym(4),List(ArrayElem(Block(Sym(5))))))

var x26 = new Array[Int](100)
var x6 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x5 = x4 + 2
val x25 = x5 + 3
x26(x4) = x25
x6(x4) = x5
}
val x27 = x26.apply(0)
val x38 = println(x27)
val x17 = x6.apply(0)
var x34 = new Array[Int](100)
for (x4 <- 0 until 100) {
val x29 = x4 + 1
val x31 = x6.apply(x4)
val x32 = x29 + x31
val x33 = x32 + x17
x34(x4) = x33
}
val x35 = x34.apply(0)
val x39 = println(x35)
-- done
