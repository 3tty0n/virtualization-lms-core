-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
TP(Sym(4),ArrayLength(Sym(3)))
TP(Sym(6),ArrayIndex(Sym(3),Sym(5)))
TP(Sym(7),OrderingGT(Sym(6),Const(50)))
TP(Sym(8),IntTimes(Sym(6),Const(2)))
TP(Sym(9),SimpleLoop(Sym(4),Sym(5),ArrayIfElem(Sym(7),Block(Sym(8)))))
TP(Sym(11),ArrayIndex(Sym(3),Sym(10)))
TP(Sym(12),OrderingLT(Sym(11),Const(20)))
TP(Sym(13),IntTimes(Sym(11),Const(3)))
TP(Sym(14),SimpleLoop(Sym(4),Sym(10),ArrayIfElem(Sym(12),Block(Sym(13)))))
TP(Sym(15),ArrayIndex(Sym(3),Const(0)))
TP(Sym(16),Reflect(Print(Sym(15)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(17),ArrayLength(Sym(9)))
TP(Sym(18),Reflect(Print(Sym(17)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(16))))
TP(Sym(19),ArrayLength(Sym(14)))
TP(Sym(20),Reflect(Print(Sym(19)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(18))))
TP(Sym(21),Reify(Sym(20),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(16), Sym(18), Sym(20))))

-- before transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x15 = x3.apply(0)
val x16 = println(x15)
val x4 = x3.length
var x9 = new ArrayBuilder[Int]
for (x5 <- 0 until x4) {
val x6 = x3.apply(x5)
val x7 = x6 > 50
val x8 = x6 * 2
if (x7) x9 += x8
}
val x17 = x9.length
val x18 = println(x17)
var x14 = new ArrayBuilder[Int]
for (x10 <- 0 until x4) {
val x11 = x3.apply(x10)
val x12 = x11 < 20
val x13 = x11 * 3
if (x12) x14 += x13
}
val x19 = x14.length
val x20 = println(x19)

-- vertical transformation

(VFT) No producers found for TP(Sym(3),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2)))))
(VFT) Replaced TP(Sym(4),ArrayLength(Sym(3))) with fixed length: Const(100)

(VFT) Fusing consumer TP(Sym(9),SimpleLoop(Sym(4),Sym(5),ArrayIfElem(Sym(7),Block(Sym(8))))) with real producer: Sym(3)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(3) and cons: Sym(9), the resulting fused loop is Sym(25)

(VFT) Fusing consumer TP(Sym(14),SimpleLoop(Sym(4),Sym(10),ArrayIfElem(Sym(12),Block(Sym(13))))) with real producer: Sym(3)
(VFT) General fusion: remap index to Sym(1), SimpleIndex to Sym(2).
(VFT) SimpleCollect+Any fusion: nothing more to do.

(VFT) Finished fusion of prod: Sym(3) and cons: Sym(14), the resulting fused loop is Sym(30)

(VFT) all vertically fused: List(Sym(3), Sym(30), Sym(25))

-- after vertical transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x15 = x3.apply(0)
val x22 = println(x15)
var x25 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x23 = x2 * 2
val x24 = x2 > 50
if (x24) x25 += x23
}
val x26 = x25.length
val x27 = println(x26)
var x30 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x2 * 3
val x29 = x2 < 20
if (x29) x30 += x28
}
val x31 = x30.length
val x32 = println(x31)

-- horizontal transformation
(HFT) Recording Sym(3), no fusion
(HFT) Fusing Sym(25) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(30), Sym(25)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(30) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(3), Sym(30), Sym(25)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(3), Sym(25), Sym(30))

-- after horizontal transformation
var x3 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x3(x1) = x2
}
val x15 = x3.apply(0)
val x34 = println(x15)
var x25 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x23 = x2 * 2
val x24 = x2 > 50
if (x24) x25 += x23
}
val x26 = x25.length
val x35 = println(x26)
var x30 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x28 = x2 * 3
val x29 = x2 < 20
if (x29) x30 += x28
}
val x31 = x30.length
val x36 = println(x31)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(3)),List(SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Sym(2))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayElem(Block(Sym(2))))))
TTP(List(Sym(25)),List(SimpleLoop(Const(100),Sym(1),ArrayIfElem(Sym(24),Block(Sym(23))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayIfElem(Sym(24),Block(Sym(23))))))
TTP(List(Sym(30)),List(SimpleLoop(Const(100),Sym(1),ArrayIfElem(Sym(29),Block(Sym(28))))),SimpleFatLoop(Const(100),Sym(1),List(ArrayIfElem(Sym(29),Block(Sym(28))))))

var x3 = new Array[Int](100)
var x25 = new ArrayBuilder[Int]
var x30 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x23 = x2 * 2
val x24 = x2 > 50
val x28 = x2 * 3
val x29 = x2 < 20
x3(x1) = x2
if (x24) x25 += x23
if (x29) x30 += x28
}
val x15 = x3.apply(0)
val x34 = println(x15)
val x26 = x25.length
val x35 = println(x26)
val x31 = x30.length
val x36 = println(x31)
-- done
