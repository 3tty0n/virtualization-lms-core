-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),Singleton(Block(Sym(2))))
TP(Sym(4),SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayLength(Sym(4)))
TP(Sym(7),ArrayIndex(Sym(4),Sym(6)))
TP(Sym(8),OrderingGT(Sym(7),Const(50)))
TP(Sym(9),IntTimes(Sym(7),Const(2)))
TP(Sym(10),Singleton(Block(Sym(9))))
TP(Sym(11),EmptyArrayInLoop(Sym(6)))
TP(Sym(12),IfThenElse(Sym(8),Block(Sym(10)),Block(Sym(11))))
TP(Sym(13),SimpleLoop(Sym(5),Sym(6),MultiArrayElem(Block(Sym(12)))))
TP(Sym(15),ArrayIndex(Sym(4),Sym(14)))
TP(Sym(16),OrderingLT(Sym(15),Const(20)))
TP(Sym(17),IntTimes(Sym(15),Const(3)))
TP(Sym(18),Singleton(Block(Sym(17))))
TP(Sym(19),EmptyArrayInLoop(Sym(14)))
TP(Sym(20),IfThenElse(Sym(16),Block(Sym(18)),Block(Sym(19))))
TP(Sym(21),SimpleLoop(Sym(5),Sym(14),MultiArrayElem(Block(Sym(20)))))
TP(Sym(22),ArrayIndex(Sym(4),Const(0)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(24),ArrayLength(Sym(13)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(23))))
TP(Sym(26),ArrayLength(Sym(21)))
TP(Sym(27),Reflect(Print(Sym(26)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(25))))
TP(Sym(28),Reify(Sym(27),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(23), Sym(25), Sym(27))))

-- before transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x22 = x4.apply(0)
val x23 = println(x22)
val x5 = x4.length
var x13 = new ArrayBuilder[Int]
for (x6 <- 0 until x5) {
val x7 = x4.apply(x6)
val x8 = x7 > 50
if (x8) {
val x9 = x7 * 2
x13 += x9
}
}
val x24 = x13.length
val x25 = println(x24)
var x21 = new ArrayBuilder[Int]
for (x14 <- 0 until x5) {
val x15 = x4.apply(x14)
val x16 = x15 < 20
if (x16) {
val x17 = x15 * 3
x21 += x17
}
}
val x26 = x21.length
val x27 = println(x26)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(5),ArrayLength(Sym(4))) with fixed length: Const(100)

(VFT) Fusing prod Sym(4) with cons Sym(13). Type: Mcsingle_Multi(Sym(2),Sym(1),Sym(6),Sym(4),Sym(4),Sym(13))
(VFT) Fused prod Sym(4) with cons Sym(13), fused sym: Sym(35)

(VFT) Fusing prod Sym(4) with cons Sym(21). Type: Mcsingle_Multi(Sym(2),Sym(1),Sym(14),Sym(4),Sym(4),Sym(21))
(VFT) Fused prod Sym(4) with cons Sym(21), fused sym: Sym(42)

(VFT) all vertically fused: List(Sym(35), Sym(42), Sym(4))

-- after vertical transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x22 = x4.apply(0)
val x29 = println(x22)
var x35 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x30 = x2 > 50
if (x30) {
val x31 = x2 * 2
x35 += x31
}
}
val x36 = x35.length
val x37 = println(x36)
var x42 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x38 = x2 < 20
if (x38) {
val x39 = x2 * 3
x42 += x39
}
}
val x43 = x42.length
val x44 = println(x43)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) Fusing Sym(35) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(35), Sym(42), Sym(4)))
(HFT) - already using same index Sym(1)
(HFT) Fusing Sym(42) with containing fusion set FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(35), Sym(42), Sym(4)))
(HFT) - already using same index Sym(1)

(HFT) all horizontally fused: List(Sym(4), Sym(35), Sym(42))

-- after horizontal transformation
val x4 = new Array[Int](100)
for (x1 <- 0 until 100) {
val x2 = x1 + 1
x4(x1) = x2
}
val x22 = x4.apply(0)
val x46 = println(x22)
var x35 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x30 = x2 > 50
if (x30) {
val x31 = x2 * 2
x35 += x31
}
}
val x36 = x35.length
val x47 = println(x36)
var x42 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x38 = x2 < 20
if (x38) {
val x39 = x2 * 3
x42 += x39
}
}
val x43 = x42.length
val x48 = println(x43)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(3))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(3))))))
TTP(List(Sym(35)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(34))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(34))))))
TTP(List(Sym(42)),List(SimpleLoop(Const(100),Sym(1),MultiArrayElem(Block(Sym(41))))),SimpleFatLoop(Const(100),Sym(1),List(MultiArrayElem(Block(Sym(41))))))

val x4 = new Array[Int](100)
var x35 = new ArrayBuilder[Int]
var x42 = new ArrayBuilder[Int]
for (x1 <- 0 until 100) {
val x2 = x1 + 1
val x30 = x2 > 50
if (x30) {
val x31 = x2 * 2
x35 += x31
}
val x38 = x2 < 20
if (x38) {
val x39 = x2 * 3
x42 += x39
}
x4(x1) = x2
}
val x22 = x4.apply(0)
val x46 = println(x22)
val x36 = x35.length
val x47 = println(x36)
val x43 = x42.length
val x48 = println(x43)
-- done
