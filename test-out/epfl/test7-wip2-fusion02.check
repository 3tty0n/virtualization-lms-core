-- full graph
TP(Sym(2),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Const(9.0)))))
TP(Sym(4),SimpleLoop(Const(50),Sym(3),ArrayElem(Block(Const(3.0)))))
TP(Sym(6),ArrayIndex(Sym(2),Const(0)))
TP(Sym(7),SimpleLoop(Const(50),Sym(5),ArrayElem(Block(Sym(6)))))
TP(Sym(9),ArrayIndex(Sym(4),Const(0)))
TP(Sym(10),SimpleLoop(Const(100),Sym(8),ArrayElem(Block(Sym(9)))))
TP(Sym(11),Reflect(Print(Sym(4)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(12),Reflect(Print(Sym(7)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(11))))
TP(Sym(13),Reflect(Print(Sym(2)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(12))))
TP(Sym(14),Reflect(Print(Sym(10)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(13))))
TP(Sym(15),Reify(Sym(14),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(11), Sym(12), Sym(13), Sym(14))))

-- before transformation
var x4 = new Array[Double](50)
for (x3 <- 0 until 50) {
x4(x3) = 3.0
}
val x11 = println(x4)
var x2 = new Array[Double](100)
for (x1 <- 0 until 100) {
x2(x1) = 9.0
}
val x6 = x2.apply(0)
var x7 = new Array[Double](50)
for (x5 <- 0 until 50) {
x7(x5) = x6
}
val x12 = println(x7)
val x13 = println(x2)
val x9 = x4.apply(0)
var x10 = new Array[Double](100)
for (x8 <- 0 until 100) {
x10(x8) = x9
}
val x14 = println(x10)

-- vertical transformation

(VFT) No producers found for TP(Sym(4),SimpleLoop(Const(50),Sym(3),ArrayElem(Block(Const(3.0)))))

(VFT) No producers found for TP(Sym(2),SimpleLoop(Const(100),Sym(1),ArrayElem(Block(Const(9.0)))))

(VFT) No producers found for TP(Sym(7),SimpleLoop(Const(50),Sym(5),ArrayElem(Block(Sym(6))))), remapping to Sym(16) because of fixed shape

(VFT) No producers found for TP(Sym(10),SimpleLoop(Const(100),Sym(8),ArrayElem(Block(Sym(9))))), remapping to Sym(19) because of fixed shape

(VFT) all vertically fused: 

-- after vertical transformation
var x4 = new Array[Double](50)
for (x3 <- 0 until 50) {
x4(x3) = 3.0
}
val x11 = println(x4)
var x2 = new Array[Double](100)
for (x1 <- 0 until 100) {
x2(x1) = 9.0
}
val x6 = x2.apply(0)
var x16 = new Array[Double](50)
for (x3 <- 0 until 50) {
x16(x3) = x6
}
val x17 = println(x16)
val x18 = println(x2)
val x9 = x4.apply(0)
var x19 = new Array[Double](100)
for (x1 <- 0 until 100) {
x19(x1) = x9
}
val x20 = println(x19)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) Recording Sym(2), no fusion
(HFT) Fusing Sym(16) with fusion set FusedSet(shape = Const(50), indexSym = Sym(3), loopSyms = List(Sym(4)))
(HFT) - already using same index Sym(3)
(HFT) The candidate Sym(19) cannot be fused with the existing FusedSet(shape = Const(100), indexSym = Sym(1), loopSyms = List(Sym(2))) because the candidate set depends on Sym(2)
(HFT) Recording Sym(19), no fusion

(HFT) all horizontally fused: List(Sym(4), Sym(16))

-- after horizontal transformation
var x2 = new Array[Double](100)
for (x1 <- 0 until 100) {
x2(x1) = 9.0
}
var x4 = new Array[Double](50)
for (x3 <- 0 until 50) {
x4(x3) = 3.0
}
val x11 = println(x4)
val x6 = x2.apply(0)
var x16 = new Array[Double](50)
for (x3 <- 0 until 50) {
x16(x3) = x6
}
val x17 = println(x16)
val x18 = println(x2)
val x9 = x4.apply(0)
var x19 = new Array[Double](100)
for (x1 <- 0 until 100) {
x19(x1) = x9
}
val x20 = println(x19)

-- fusion
(FTO) Fusing these loops into one fat TTP: 
TTP(List(Sym(4)),List(SimpleLoop(Const(50),Sym(3),ArrayElem(Block(Const(3.0))))),SimpleFatLoop(Const(50),Sym(3),List(ArrayElem(Block(Const(3.0))))))
TTP(List(Sym(16)),List(SimpleLoop(Const(50),Sym(3),ArrayElem(Block(Sym(6))))),SimpleFatLoop(Const(50),Sym(3),List(ArrayElem(Block(Sym(6))))))

var x2 = new Array[Double](100)
for (x1 <- 0 until 100) {
x2(x1) = 9.0
}
val x6 = x2.apply(0)
var x4 = new Array[Double](50)
var x16 = new Array[Double](50)
for (x3 <- 0 until 50) {
x4(x3) = 3.0
x16(x3) = x6
}
val x11 = println(x4)
val x17 = println(x16)
val x18 = println(x2)
val x9 = x4.apply(0)
var x19 = new Array[Double](100)
for (x1 <- 0 until 100) {
x19(x1) = x9
}
val x20 = println(x19)
-- done
