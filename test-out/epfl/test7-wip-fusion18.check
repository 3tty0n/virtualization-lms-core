-- full graph
TP(Sym(2),IntPlus(Sym(1),Const(1)))
TP(Sym(3),SingletonInLoop(Block(Sym(2)),Sym(1)))
TP(Sym(4),SimpleLoop(Sym(0),Sym(1),MultiArrayElem(Block(Sym(3)))))
TP(Sym(5),ArrayIndex(Sym(4),Const(0)))
TP(Sym(6),Reflect(Print(Sym(5)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List()))
TP(Sym(7),ArrayLength(Sym(4)))
TP(Sym(9),ArrayIndex(Sym(4),Sym(8)))
TP(Sym(10),Reflect(Print(Sym(9)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(11),IntPlus(Sym(8),Const(45)))
TP(Sym(12),Reify(Sym(11),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(10))))
TP(Sym(13),Reflect(SingletonInLoop(Block(Sym(12)),Sym(8)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(14),Reify(Sym(13),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(13))))
TP(Sym(15),Reflect(SimpleLoop(Sym(7),Sym(8),MultiArrayElem(Block(Sym(14)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List(Sym(6))))
TP(Sym(17),Reflect(Print(Sym(16)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(15))))
TP(Sym(18),Reify(Sym(16),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(17))))
TP(Sym(19),Reflect(Singleton(Block(Sym(18))),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(15))))
TP(Sym(20),Reify(Sym(19),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(19))))
TP(Sym(21),Reflect(SimpleLoop(Const(10),Sym(16),MultiArrayElem(Block(Sym(20)))),Summary(true,false,false,false,false,false,List(),List(),List(),List()),List(Sym(15))))
TP(Sym(22),ArrayIndex(Sym(15),Const(1)))
TP(Sym(23),Reflect(Print(Sym(22)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(21))))
TP(Sym(24),ArrayIndex(Sym(21),Const(1)))
TP(Sym(25),Reflect(Print(Sym(24)),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(23))))
TP(Sym(26),Reify(Sym(25),Summary(true,true,false,false,false,false,List(),List(),List(),List()),List(Sym(6), Sym(15), Sym(21), Sym(23), Sym(25))))

-- before transformation
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x6 = println(x5)
val x7 = x4.length
val x15 = new Array[Int](x7)
for (x8 <- 0 until x7) {
val x9 = x4.apply(x8)
val x10 = println(x9)
val x11 = x8 + 45
x15(x8) = x11
}
val x21 = new Array[Int](10)
for (x16 <- 0 until 10) {
val x17 = println(x16)
x21(x16) = x16
}
val x22 = x15.apply(1)
val x23 = println(x22)
val x24 = x21.apply(1)
val x25 = println(x24)

-- vertical transformation

(VFT) No producers found for cons Sym(4)
(VFT) Replaced TP(Sym(7),ArrayLength(Sym(4))) with fixed length: Sym(0)

(VFT) Not fused prod Sym(4) with cons Sym(15) because consumer depends on producer through Sym(4)
(VFT) No producers found for cons Sym(15)
(VFT) Cons Sym(15) not fused but mirrored to Sym(34) because of fixed shape

(VFT) No producers found for cons Sym(21)
(VFT) Cons Sym(21) not fused but mirrored to Sym(39) because of previous substitutions or effects

(VFT) all vertically fused: 

-- after vertical transformation
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x27 = println(x5)
val x34 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x29 = x1 + 45
val x28 = x4.apply(x1)
val x30 = println(x28)
x34(x1) = x29
}
val x39 = new Array[Int](10)
for (x16 <- 0 until 10) {
val x35 = println(x16)
x39(x16) = x16
}
val x40 = x34.apply(1)
val x41 = println(x40)
val x42 = x39.apply(1)
val x43 = println(x42)

-- horizontal transformation
(HFT) Recording Sym(4), no fusion
(HFT) The candidate Sym(34) cannot be fused with the existing FusedLoopSet(shape = Sym(0), indexSym = Sym(1), loopSyms = List(Sym(4))) because the candidate set depends on Sym(4)
(HFT) Recording Sym(34), no fusion
(HFT) - remapping index to unique: Sym(1) -> Sym(46)
(HFT) - new loop symbol: Sym(34) -> Sym(53)
(HFT) Recording Sym(39), no fusion
(HFT) - new loop symbol: Sym(39) -> Sym(58)

(HFT) all horizontally fused: 

-- after horizontal transformation
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x45 = println(x5)
val x53 = new Array[Int](x0)
for (x46 <- 0 until x0) {
val x47 = x46 + 45
val x48 = x4.apply(x46)
val x49 = println(x48)
x53(x46) = x47
}
val x58 = new Array[Int](10)
for (x16 <- 0 until 10) {
val x54 = println(x16)
x58(x16) = x16
}
val x59 = x53.apply(1)
val x60 = println(x59)
val x61 = x58.apply(1)
val x62 = println(x61)

-- fusion
val x4 = new Array[Int](x0)
for (x1 <- 0 until x0) {
val x2 = x1 + 1
x4(x1) = x2
}
val x5 = x4.apply(0)
val x45 = println(x5)
val x53 = new Array[Int](x0)
for (x46 <- 0 until x0) {
val x47 = x46 + 45
val x48 = x4.apply(x46)
val x49 = println(x48)
x53(x46) = x47
}
val x58 = new Array[Int](10)
for (x16 <- 0 until 10) {
val x54 = println(x16)
x58(x16) = x16
}
val x59 = x53.apply(1)
val x60 = println(x59)
val x61 = x58.apply(1)
val x62 = println(x61)
-- done
