/*****************************************
  Emitting Generated Code                  
*******************************************/
class Test extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
var x3: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.CartesianComplex] = manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
var x4: Double = 0.0
val x1 = x0
var x5: Double = x1
var x8: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.PolarComplex] = manifest[scala.virtualization.lms.epfl.test9.PolarComplex]
var x9: Double = x1
var x10: Double = 0.0
val x12 = x0 > 0
val x26 = if (x12) {
val x14 = x4
x14
} else {
val x25 = 0
x25
}
var x33: Double = x26
val x27 = if (x12) {
val x15 = x5
x15
} else {
val x25 = 0
x25
}
var x34: Double = x27
val x28 = if (x12) {
val x13 = x3
x13
} else {
val x18 = x8
x18
}
val x31 = x28.asInstanceOf[scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.Complex]]
var x35: scala.reflect.Manifest[scala.virtualization.lms.epfl.test9.Complex] = x31
val x29 = if (x12) {
val x25 = 0
x25
} else {
val x20 = x10
x20
}
var x36: Double = x29
val x30 = if (x12) {
val x25 = 0
x25
} else {
val x19 = x9
x19
}
var x37: Double = x30
val x39 = x33
val x40 = x34
val x41 = x35
val x42 = x36
val x43 = x37
val x45 = x41 <:< manifest[scala.virtualization.lms.epfl.test9.CartesianComplex]
val x49 = if (x45) {
val x46 = println("definitely a cartesian!")
x46
} else {
()
}
x49
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
definitely a cartesian!
